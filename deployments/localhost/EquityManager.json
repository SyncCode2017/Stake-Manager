{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_i3Fund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EquityManager__InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EquityManager__StakeIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EquityManager__TotalValueGreaterThan100",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EquityManager__TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeUpdated",
          "type": "uint256"
        }
      ],
      "name": "EquityStakeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeholderNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeAdded",
          "type": "uint256"
        }
      ],
      "name": "NewStakeHolderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Cstakeholders",
      "outputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "created",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Impact3Account",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Istakeholders",
      "outputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "created",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PauserRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "addHolder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStakeHolders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_holders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_stakesPercent",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "equityUpdateInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundsDistributedToDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundsSentToI3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i3Fund",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fund",
          "type": "address"
        }
      ],
      "name": "setFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeUpdatedXtimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeholderCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "holder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakePercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastReceived",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "created",
              "type": "uint256"
            }
          ],
          "internalType": "struct EquityManager.EquityStake[]",
          "name": "_stakeholders",
          "type": "tuple[]"
        }
      ],
      "name": "totalStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb614c521736818a13d3a47d604778b7f42d40508efcf7ec373e708580b73144b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2839996",
    "logsBloom": "0x
    "blockHash": "0x43f6ffade0e18c89dab9f7e3d4562056c892a259a1a0b6065e18ce3f21fc59f7",
    "transactionHash": "0xb614c521736818a13d3a47d604778b7f42d40508efcf7ec373e708580b73144b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xb614c521736818a13d3a47d604778b7f42d40508efcf7ec373e708580b73144b",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x43f6ffade0e18c89dab9f7e3d4562056c892a259a1a0b6065e18ce3f21fc59f7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xb614c521736818a13d3a47d604778b7f42d40508efcf7ec373e708580b73144b",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x43f6ffade0e18c89dab9f7e3d4562056c892a259a1a0b6065e18ce3f21fc59f7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xb614c521736818a13d3a47d604778b7f42d40508efcf7ec373e708580b73144b",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x43f6ffade0e18c89dab9f7e3d4562056c892a259a1a0b6065e18ce3f21fc59f7"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2839996",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "1000"
  ],
  "numDeployments": 1,
  "solcInputHash": "328d2e1bd6663decf790f14e729a7250",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_i3Fund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EquityManager__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EquityManager__StakeIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EquityManager__TotalValueGreaterThan100\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EquityManager__TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeUpdated\",\"type\":\"uint256\"}],\"name\":\"EquityStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeholderNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"}],\"name\":\"NewStakeHolderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Cstakeholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Impact3Account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Istakeholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PauserRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"addHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStakeHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_stakesPercent\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"equityUpdateInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsDistributedToDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsSentToI3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i3Fund\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"}],\"name\":\"setFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeUpdatedXtimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeholderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"internalType\":\"struct EquityManager.EquityStake[]\",\"name\":\"_stakeholders\",\"type\":\"tuple[]\"}],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"info@impact3.io\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EquityManager.sol\":\"EquityManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/EquityManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nerror EquityManager__TotalValueGreaterThan100();\\nerror EquityManager__StakeIsZero();\\nerror EquityManager__TransactionFailed();\\nerror EquityManager__InsufficientBalance();\\n\\n/// @custom:security-contact info@impact3.io\\ncontract EquityManager is Pausable, AccessControl, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    event FundsReceived(address indexed addr, uint256 amount);\\n    event FundsDistributed(uint256 amount);\\n    event EquityStakeUpdated(uint256 count, uint256 timeUpdated);\\n    event NewStakeHolderAdded(\\n        address holder,\\n        uint256 stake,\\n        uint256 stakeholderNum,\\n        uint256 timeAdded\\n    );\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    struct EquityStake {\\n        address holder;\\n        uint256 stakePercentage;\\n        uint256 lastReceived;\\n        uint256 created;\\n    }\\n\\n    EquityStake[] public Istakeholders;\\n    EquityStake[] public Cstakeholders;\\n    uint256 public stakeholderCount;\\n    uint256 counter = 0;\\n    address payable public i3Fund;\\n    uint256 cumfundsDistributed = 0;\\n    uint256 cumfundsToI3 = 0;\\n    uint256 public immutable i_interval;\\n    uint256 private s_lastTimeStamp;\\n\\n    constructor(address _i3Fund, uint256 _interval) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n        _grantRole(MANAGER_ROLE, msg.sender);\\n        setFund(_i3Fund);\\n        i_interval = _interval;\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    /////////////////////\\n    // Main Functions //\\n    /////////////////////\\n\\n    function setFund(address fund) public onlyRole(MANAGER_ROLE) nonReentrant {\\n        i3Fund = payable(fund);\\n    }\\n\\n    /*\\n     * @notice Method for distributing funds\\n     * @notice equity stake is updated at the every stipulated interval\\n     */\\n    function distributeFunds() public whenNotPaused nonReentrant {\\n        uint256 fundsToDistribute = address(this).balance;\\n        bool incrStake = timePassed();\\n        Cstakeholders = updateStake(incrStake);\\n        EquityStake[] memory equityStakeHolders = Cstakeholders;\\n        for (uint256 i = 0; i < stakeholderCount; i++) {\\n            uint256 amount = fundsToDistribute\\n                .mul(equityStakeHolders[i].stakePercentage)\\n                .div(100 * (10**18));\\n            equityStakeHolders[i].lastReceived = block.timestamp;\\n            cumfundsDistributed += amount;\\n            sendValue(payable(equityStakeHolders[i].holder), amount);\\n        }\\n        cumfundsToI3 += address(this).balance;\\n        sendValue(i3Fund, address(this).balance);\\n        emit FundsDistributed(cumfundsDistributed);\\n    }\\n\\n    function totalStake(EquityStake[] memory _stakeholders)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _totalStake = 0;\\n        for (uint256 i = 0; i < stakeholderCount; i++) {\\n            _totalStake += _stakeholders[i].stakePercentage;\\n        }\\n        return _totalStake;\\n    }\\n\\n    /*\\n     * @notice Method for adding new stakeholder\\n     * @notice Only the manager can call this funtion\\n     * @param holder, new stakeholder's address\\n     * @param stake, new stakeholder's stake in %\\n     */\\n    function addHolder(address holder, uint256 stake)\\n        public\\n        whenNotPaused\\n        onlyRole(MANAGER_ROLE)\\n    {\\n        if (totalStake(updateStake(false)).add(stake) > (100 * (10**18))) {\\n            // 100%\\n            revert EquityManager__TotalValueGreaterThan100();\\n        }\\n\\n        if (stake <= 0) {\\n            revert EquityManager__StakeIsZero();\\n        }\\n        Istakeholders.push(\\n            EquityStake(holder, stake, block.timestamp, block.timestamp)\\n        );\\n        Cstakeholders.push(\\n            EquityStake(holder, stake, block.timestamp, block.timestamp)\\n        );\\n        stakeholderCount++;\\n        emit NewStakeHolderAdded(\\n            holder,\\n            stake,\\n            stakeholderCount,\\n            block.timestamp\\n        );\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert EquityManager__InsufficientBalance();\\n        }\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert EquityManager__TransactionFailed();\\n        }\\n    }\\n\\n    function timePassed() internal returns (bool) {\\n        bool timepassed = ((block.timestamp - s_lastTimeStamp) >= i_interval);\\n        if (timepassed) {\\n            s_lastTimeStamp = block.timestamp;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /*\\n     * @notice Internal funtion for updating equity stake\\n     * @notice It checks whether the total stake > 100\\n     * @param incrStake, a bool to ensure equity stakes\\n     * are updated only after the stipulated interval.\\n     */\\n    function updateStake(bool incrStake)\\n        internal\\n        returns (EquityStake[] storage)\\n    {\\n        EquityStake[] storage maxEquityStake = Cstakeholders;\\n        EquityStake[] storage testEquityStake = Cstakeholders;\\n\\n        if (incrStake) {\\n            EquityStake[] memory Iequitystake = Istakeholders;\\n            for (uint256 i = 0; i < Cstakeholders.length; i++) {\\n                testEquityStake[i].stakePercentage += Iequitystake[i]\\n                    .stakePercentage;\\n            }\\n            if (totalStake(testEquityStake) <= 100) {\\n                counter++;\\n                emit EquityStakeUpdated(counter, block.timestamp);\\n                return testEquityStake;\\n            }\\n            return maxEquityStake;\\n        }\\n        return Cstakeholders;\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function deposit() external payable {\\n        emit FundsReceived(msg.sender, msg.value);\\n    }\\n\\n    /////////////////////\\n    // Getter Functions //\\n    /////////////////////\\n\\n    /*\\n     * @notice Function for getting stakeholders and\\n     * their current equity stake\\n     */\\n    function currentStakeHolders()\\n        external\\n        view\\n        returns (address[] memory _holders, uint256[] memory _stakesPercent)\\n    {\\n        EquityStake[] memory equitystake = Cstakeholders;\\n        _holders = new address[](equitystake.length);\\n        _stakesPercent = new uint256[](equitystake.length);\\n        for (uint256 i = 0; i < equitystake.length; i++) {\\n            _holders[i] = equitystake[i].holder;\\n            _stakesPercent[i] = equitystake[i].stakePercentage;\\n        }\\n\\n        return (_holders, _stakesPercent);\\n    }\\n\\n    function contractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function Impact3Account() external view returns (address) {\\n        return i3Fund;\\n    }\\n\\n    function PauserRole() external pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n\\n    function equityUpdateInterval() external view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function stakeUpdatedXtimes() external view returns (uint256) {\\n        return counter;\\n    }\\n\\n    function fundsDistributedToDate() external view returns (uint256) {\\n        return cumfundsDistributed;\\n    }\\n\\n    function fundsSentToI3() external view returns (uint256) {\\n        return cumfundsToI3;\\n    }\\n}\\n\",\"keccak256\":\"0xe00cf286d83ec83263d45d29fb6661468a66e250d1a040dc99be9dc7f078f3b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526000600655600060085560006009553480156200002057600080fd5b5060405162003af438038062003af48339818101604052810190620000469190620006ac565b60008060006101000a81548160ff02191690831515021790555060016002819055506200007d6000801b336200010960201b60201c565b620000af7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336200010960201b60201c565b620000e17f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08336200010960201b60201c565b620000f282620001fa60201b60201c565b806080818152505042600a81905550505062000bb4565b6200011b8282620002c860201b60201c565b620001f657600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200019b6200033360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086200022c816200033b60201b60201c565b60028054141562000274576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200026b906200088f565b60405180910390fd5b6002808190555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016002819055505050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6200035c81620003506200033360201b60201c565b6200035f60201b60201c565b50565b620003718282620002c860201b60201c565b6200041f57620003a48173ffffffffffffffffffffffffffffffffffffffff1660146200042360201b620015161760201c565b620003bf8360001c60206200042360201b620015161760201c565b604051602001620003d292919062000807565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000416919062000849565b60405180910390fd5b5050565b60606000600283600262000438919062000935565b620004449190620008d8565b67ffffffffffffffff81111562000460576200045f62000a97565b5b6040519080825280601f01601f191660200182016040528015620004935781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110620004ce57620004cd62000a68565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811062000535576200053462000a68565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600262000577919062000935565b620005839190620008d8565b90505b60018111156200062d577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110620005c957620005c862000a68565b5b1a60f81b828281518110620005e357620005e262000a68565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080620006259062000a0a565b905062000586565b506000841462000674576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200066b906200086d565b60405180910390fd5b8091505092915050565b6000815190506200068f8162000b80565b92915050565b600081519050620006a68162000b9a565b92915050565b60008060408385031215620006c657620006c562000ac6565b5b6000620006d6858286016200067e565b9250506020620006e98582860162000695565b9150509250929050565b60006200070082620008b1565b6200070c8185620008bc565b93506200071e818560208601620009d4565b620007298162000acb565b840191505092915050565b60006200074182620008b1565b6200074d8185620008cd565b93506200075f818560208601620009d4565b80840191505092915050565b60006200077a602083620008bc565b9150620007878262000adc565b602082019050919050565b6000620007a1601783620008cd565b9150620007ae8262000b05565b601782019050919050565b6000620007c8601f83620008bc565b9150620007d58262000b2e565b602082019050919050565b6000620007ef601183620008cd565b9150620007fc8262000b57565b601182019050919050565b6000620008148262000792565b915062000822828562000734565b91506200082f82620007e0565b91506200083d828462000734565b91508190509392505050565b60006020820190508181036000830152620008658184620006f3565b905092915050565b6000602082019050818103600083015262000888816200076b565b9050919050565b60006020820190508181036000830152620008aa81620007b9565b9050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000620008e582620009ca565b9150620008f283620009ca565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200092a576200092962000a39565b5b828201905092915050565b60006200094282620009ca565b91506200094f83620009ca565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200098b576200098a62000a39565b5b828202905092915050565b6000620009a382620009aa565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620009f4578082015181840152602081019050620009d7565b8381111562000a04576000848401525b50505050565b600062000a1782620009ca565b9150600082141562000a2e5762000a2d62000a39565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b62000b8b8162000996565b811462000b9757600080fd5b50565b62000ba581620009ca565b811462000bb157600080fd5b50565b608051612f1662000bde60003960008181610fd1015281816110c501526119e90152612f166000f3fe6080604052600436106101cd5760003560e01c806394296a2f116100f7578063cd7531e511610095578063e63ab1e911610064578063e63ab1e91461063c578063ec87621c14610667578063f98fc53414610692578063faa97c8f146106bd576101cd565b8063cd7531e51461059e578063d0e30db0146105de578063d547741f146105e8578063d8319ef314610611576101cd565b8063a8e832b8116100d1578063a8e832b8146104df578063b98fc93b1461050b578063c55dc04c14610548578063c685a67d14610573576101cd565b806394296a2f1461045e5780639b2fdfd214610489578063a217fddf146104b4576101cd565b80633f4ba83a1161016f57806373a187e51161013e57806373a187e5146103b45780638456cb59146103df5780638b7afe2e146103f657806391d1485414610421576101cd565b80633f4ba83a1461031e5780635c975abb1461033557806361f15236146103605780636919207d14610389576101cd565b8063248a9ca3116101ab578063248a9ca3146102785780632f2ff15d146102b557806336568abe146102de5780633a6a4d2e14610307576101cd565b806301ffc9a7146101d25780630e21750f1461020f57806315a194e614610238575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190612377565b6106e8565b60405161020691906127a9565b60405180910390f35b34801561021b57600080fd5b5061023660048036038101906102319190612254565b610762565b005b34801561024457600080fd5b5061025f600480360381019061025a91906123a4565b610825565b60405161026f949392919061272d565b60405180910390f35b34801561028457600080fd5b5061029f600480360381019061029a919061230a565b610885565b6040516102ac91906127c4565b60405180910390f35b3480156102c157600080fd5b506102dc60048036038101906102d79190612337565b6108a5565b005b3480156102ea57600080fd5b5061030560048036038101906103009190612337565b6108c6565b005b34801561031357600080fd5b5061031c610949565b005b34801561032a57600080fd5b50610333610bfa565b005b34801561034157600080fd5b5061034a610c2f565b60405161035791906127a9565b60405180910390f35b34801561036c57600080fd5b5061038760048036038101906103829190612281565b610c45565b005b34801561039557600080fd5b5061039e610fcf565b6040516103ab91906128a1565b60405180910390f35b3480156103c057600080fd5b506103c9610ff3565b6040516103d69190612712565b60405180910390f35b3480156103eb57600080fd5b506103f4611019565b005b34801561040257600080fd5b5061040b61104e565b60405161041891906128a1565b60405180910390f35b34801561042d57600080fd5b5061044860048036038101906104439190612337565b611056565b60405161045591906127a9565b60405180910390f35b34801561046a57600080fd5b506104736110c1565b60405161048091906128a1565b60405180910390f35b34801561049557600080fd5b5061049e6110e9565b6040516104ab91906128a1565b60405180910390f35b3480156104c057600080fd5b506104c96110f3565b6040516104d691906127c4565b60405180910390f35b3480156104eb57600080fd5b506104f46110fa565b604051610502929190612772565b60405180910390f35b34801561051757600080fd5b50610532600480360381019061052d91906122c1565b611334565b60405161053f91906128a1565b60405180910390f35b34801561055457600080fd5b5061055d611391565b60405161056a91906128a1565b60405180910390f35b34801561057f57600080fd5b5061058861139b565b60405161059591906127c4565b60405180910390f35b3480156105aa57600080fd5b506105c560048036038101906105c091906123a4565b6113c3565b6040516105d5949392919061272d565b60405180910390f35b6105e6611423565b005b3480156105f457600080fd5b5061060f600480360381019061060a9190612337565b611473565b005b34801561061d57600080fd5b50610626611494565b60405161063391906128a1565b60405180910390f35b34801561064857600080fd5b5061065161149a565b60405161065e91906127c4565b60405180910390f35b34801561067357600080fd5b5061067c6114be565b60405161068991906127c4565b60405180910390f35b34801561069e57600080fd5b506106a76114e2565b6040516106b491906128a1565b60405180910390f35b3480156106c957600080fd5b506106d26114ec565b6040516106df91906126f7565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061075b575061075a82611752565b5b9050919050565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861078c816117bc565b6002805414156107d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c890612861565b60405180910390fd5b6002808190555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016002819055505050565b6003818154811061083557600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154905084565b600060016000838152602001908152602001600020600101549050919050565b6108ae82610885565b6108b7816117bc565b6108c183836117d0565b505050565b6108ce6118b0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461093b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093290612881565b60405180910390fd5b61094582826118b8565b5050565b61095161199a565b600280541415610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098d90612861565b60405180910390fd5b60028081905550600047905060006109ac6119e4565b90506109b781611a3a565b60049080546109c7929190611fb7565b5060006004805480602002602001604051908101604052809291908181526020016000905b82821015610a9257838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481525050815260200190600101906109ec565b50505050905060005b600554811015610b6e576000610af368056bc75e2d63100000610ae5858581518110610aca57610ac9612cb4565b5b60200260200101516020015188611ce990919063ffffffff16565b611cff90919063ffffffff16565b905042838381518110610b0957610b08612cb4565b5b602002602001015160400181815250508060086000828254610b2b91906129da565b92505081905550610b5a838381518110610b4857610b47612cb4565b5b60200260200101516000015182611d15565b508080610b6690612c0d565b915050610a9b565b504760096000828254610b8191906129da565b92505081905550610bb4600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1647611d15565b7f8eecd6f35243e1875b7143b093766263953bc97e6e92213e4ae934c67e1fe0de600854604051610be591906128a1565b60405180910390a15050506001600281905550565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610c24816117bc565b610c2c611df7565b50565b60008060009054906101000a900460ff16905090565b610c4d61199a565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08610c77816117bc565b68056bc75e2d63100000610d6f83610d61610c926000611a3a565b805480602002602001604051908101604052809291908181526020016000905b82821015610d5857838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610cb2565b50505050611334565b611e5990919063ffffffff16565b1115610da7576040517ff7752b5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008211610de1576040517f9bc4b81000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360405180608001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200142815260200142815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050600460405180608001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200142815260200142815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030155505060056000815480929190610f8690612c0d565b91905055507f75005e1f7bc8f4d8c1a1a039ee3989a5d55fce924c3aca886ecc5a99feb433c3838360055442604051610fc2949392919061272d565b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a611043816117bc565b61104b611e6f565b50565b600047905090565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600954905090565b6000801b81565b60608060006004805480602002602001604051908101604052809291908181526020016000905b828210156111c757838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611121565b505050509050805167ffffffffffffffff8111156111e8576111e7612ce3565b5b6040519080825280602002602001820160405280156112165781602001602082028036833780820191505090505b509250805167ffffffffffffffff81111561123457611233612ce3565b5b6040519080825280602002602001820160405280156112625781602001602082028036833780820191505090505b50915060005b815181101561132e5781818151811061128457611283612cb4565b5b6020026020010151600001518482815181106112a3576112a2612cb4565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181815181106112f0576112ef612cb4565b5b60200260200101516020015183828151811061130f5761130e612cb4565b5b602002602001018181525050808061132690612c0d565b915050611268565b50509091565b6000806000905060005b6005548110156113875783818151811061135b5761135a612cb4565b5b6020026020010151602001518261137291906129da565b9150808061137f90612c0d565b91505061133e565b5080915050919050565b6000600654905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b600481815481106113d357600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154905084565b3373ffffffffffffffffffffffffffffffffffffffff167f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f3460405161146991906128a1565b60405180910390a2565b61147c82610885565b611485816117bc565b61148f83836118b8565b505050565b60055481565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b6000600854905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600060028360026115299190612a61565b61153391906129da565b67ffffffffffffffff81111561154c5761154b612ce3565b5b6040519080825280601f01601f19166020018201604052801561157e5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106115b6576115b5612cb4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061161a57611619612cb4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261165a9190612a61565b61166491906129da565b90505b6001811115611704577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106116a6576116a5612cb4565b5b1a60f81b8282815181106116bd576116bc612cb4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806116fd90612bb2565b9050611667565b5060008414611748576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173f90612801565b60405180910390fd5b8091505092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6117cd816117c86118b0565b611ed1565b50565b6117da8282611056565b6118ac57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506118516118b0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6118c28282611056565b156119965760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061193b6118b0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6119a2610c2f565b156119e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d990612841565b60405180910390fd5b565b6000807f0000000000000000000000000000000000000000000000000000000000000000600a5442611a169190612abb565b101590508015611a315742600a819055506001915050611a37565b60009150505b90565b600080600490506000600490508315611cdd5760006003805480602002602001604051908101604052809291908181526020016000905b82821015611b1757838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611a71565b50505050905060005b600480549050811015611b9957818181518110611b4057611b3f612cb4565b5b602002602001015160200151838281548110611b5f57611b5e612cb4565b5b90600052602060002090600402016001016000828254611b7f91906129da565b925050819055508080611b9190612c0d565b915050611b20565b506064611c6f83805480602002602001604051908101604052809291908181526020016000905b82821015611c6657838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611bc0565b50505050611334565b11611cd25760066000815480929190611c8790612c0d565b91905055507f3c90b012a4880920f10250f2c2d7c5cb1064277a571254e00c1992d8fcb5f0f060065442604051611cbf9291906128bc565b60405180910390a1819350505050611ce4565b829350505050611ce4565b6004925050505b919050565b60008183611cf79190612a61565b905092915050565b60008183611d0d9190612a30565b905092915050565b80471015611d4f576040517f4034001800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051611d75906126a8565b60006040518083038185875af1925050503d8060008114611db2576040519150601f19603f3d011682016040523d82523d6000602084013e611db7565b606091505b5050905080611df2576040517ffbb12e0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b611dff611f6e565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e426118b0565b604051611e4f91906126f7565b60405180910390a1565b60008183611e6791906129da565b905092915050565b611e7761199a565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611eba6118b0565b604051611ec791906126f7565b60405180910390a1565b611edb8282611056565b611f6a57611f008173ffffffffffffffffffffffffffffffffffffffff166014611516565b611f0e8360001c6020611516565b604051602001611f1f9291906126bd565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6191906127df565b60405180910390fd5b5050565b611f76610c2f565b611fb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fac90612821565b60405180910390fd5b565b8280548282559060005260206000209060040281019282156120835760005260206000209160040282015b828111156120825782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182015481600101556002820154816002015560038201548160030155505091600401919060040190611fe2565b5b5090506120909190612094565b5090565b5b808211156120e657600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905550600401612095565b5090565b60006120fd6120f88461290a565b6128e5565b905080838252602082019050828560808602820111156121205761211f612d1c565b5b60005b85811015612150578161213688826121c7565b845260208401935060808301925050600181019050612123565b5050509392505050565b60008135905061216981612e84565b92915050565b600082601f83011261218457612183612d12565b5b81356121948482602086016120ea565b91505092915050565b6000813590506121ac81612e9b565b92915050565b6000813590506121c181612eb2565b92915050565b6000608082840312156121dd576121dc612d17565b5b6121e760806128e5565b905060006121f78482850161215a565b600083015250602061220b8482850161223f565b602083015250604061221f8482850161223f565b60408301525060606122338482850161223f565b60608301525092915050565b60008135905061224e81612ec9565b92915050565b60006020828403121561226a57612269612d26565b5b60006122788482850161215a565b91505092915050565b6000806040838503121561229857612297612d26565b5b60006122a68582860161215a565b92505060206122b78582860161223f565b9150509250929050565b6000602082840312156122d7576122d6612d26565b5b600082013567ffffffffffffffff8111156122f5576122f4612d21565b5b6123018482850161216f565b91505092915050565b6000602082840312156123205761231f612d26565b5b600061232e8482850161219d565b91505092915050565b6000806040838503121561234e5761234d612d26565b5b600061235c8582860161219d565b925050602061236d8582860161215a565b9150509250929050565b60006020828403121561238d5761238c612d26565b5b600061239b848285016121b2565b91505092915050565b6000602082840312156123ba576123b9612d26565b5b60006123c88482850161223f565b91505092915050565b60006123dd8383612410565b60208301905092915050565b60006123f5838361268a565b60208301905092915050565b61240a81612b01565b82525050565b61241981612aef565b82525050565b61242881612aef565b82525050565b600061243982612956565b6124438185612991565b935061244e83612936565b8060005b8381101561247f57815161246688826123d1565b975061247183612977565b925050600181019050612452565b5085935050505092915050565b600061249782612961565b6124a181856129a2565b93506124ac83612946565b8060005b838110156124dd5781516124c488826123e9565b97506124cf83612984565b9250506001810190506124b0565b5085935050505092915050565b6124f381612b13565b82525050565b61250281612b1f565b82525050565b60006125138261296c565b61251d81856129be565b935061252d818560208601612b7f565b61253681612d2b565b840191505092915050565b600061254c8261296c565b61255681856129cf565b9350612566818560208601612b7f565b80840191505092915050565b600061257f6020836129be565b915061258a82612d3c565b602082019050919050565b60006125a26014836129be565b91506125ad82612d65565b602082019050919050565b60006125c56010836129be565b91506125d082612d8e565b602082019050919050565b60006125e86000836129b3565b91506125f382612db7565b600082019050919050565b600061260b6017836129cf565b915061261682612dba565b601782019050919050565b600061262e601f836129be565b915061263982612de3565b602082019050919050565b60006126516011836129cf565b915061265c82612e0c565b601182019050919050565b6000612674602f836129be565b915061267f82612e35565b604082019050919050565b61269381612b75565b82525050565b6126a281612b75565b82525050565b60006126b3826125db565b9150819050919050565b60006126c8826125fe565b91506126d48285612541565b91506126df82612644565b91506126eb8284612541565b91508190509392505050565b600060208201905061270c600083018461241f565b92915050565b60006020820190506127276000830184612401565b92915050565b6000608082019050612742600083018761241f565b61274f6020830186612699565b61275c6040830185612699565b6127696060830184612699565b95945050505050565b6000604082019050818103600083015261278c818561242e565b905081810360208301526127a0818461248c565b90509392505050565b60006020820190506127be60008301846124ea565b92915050565b60006020820190506127d960008301846124f9565b92915050565b600060208201905081810360008301526127f98184612508565b905092915050565b6000602082019050818103600083015261281a81612572565b9050919050565b6000602082019050818103600083015261283a81612595565b9050919050565b6000602082019050818103600083015261285a816125b8565b9050919050565b6000602082019050818103600083015261287a81612621565b9050919050565b6000602082019050818103600083015261289a81612667565b9050919050565b60006020820190506128b66000830184612699565b92915050565b60006040820190506128d16000830185612699565b6128de6020830184612699565b9392505050565b60006128ef612900565b90506128fb8282612bdc565b919050565b6000604051905090565b600067ffffffffffffffff82111561292557612924612ce3565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006129e582612b75565b91506129f083612b75565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a2557612a24612c56565b5b828201905092915050565b6000612a3b82612b75565b9150612a4683612b75565b925082612a5657612a55612c85565b5b828204905092915050565b6000612a6c82612b75565b9150612a7783612b75565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ab057612aaf612c56565b5b828202905092915050565b6000612ac682612b75565b9150612ad183612b75565b925082821015612ae457612ae3612c56565b5b828203905092915050565b6000612afa82612b55565b9050919050565b6000612b0c82612b55565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015612b9d578082015181840152602081019050612b82565b83811115612bac576000848401525b50505050565b6000612bbd82612b75565b91506000821415612bd157612bd0612c56565b5b600182039050919050565b612be582612d2b565b810181811067ffffffffffffffff82111715612c0457612c03612ce3565b5b80604052505050565b6000612c1882612b75565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c4b57612c4a612c56565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b50565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b612e8d81612aef565b8114612e9857600080fd5b50565b612ea481612b1f565b8114612eaf57600080fd5b50565b612ebb81612b29565b8114612ec657600080fd5b50565b612ed281612b75565b8114612edd57600080fd5b5056fea2646970667358221220cdbeb1261f7ba5078d412de6b574e7fba6880005a43bc9d2458dac5120f36a7264736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "custom:security-contact": "info@impact3.io",
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 410,
        "contract": "contracts/EquityManager.sol:EquityManager",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/EquityManager.sol:EquityManager",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 511,
        "contract": "contracts/EquityManager.sol:EquityManager",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1209,
        "contract": "contracts/EquityManager.sol:EquityManager",
        "label": "Istakeholders",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(EquityStake)1205_storage)dyn_storage"
      },
      {
        "astId": 1213,
        "contract": "contracts/EquityManager.sol:EquityManager",
        "label": "Cstakeholders",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(EquityStake)1205_storage)dyn_storage"
      },
      {
        "astId": 1215,
        "contract": "contracts/EquityManager.sol:EquityManager",
        "label": "stakeholderCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1218,
        "contract": "contracts/EquityManager.sol:EquityManager",
        "label": "counter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1220,
        "contract": "contracts/EquityManager.sol:EquityManager",
        "label": "i3Fund",
        "offset": 0,
        "slot": "7",
        "type": "t_address_payable"
      },
      {
        "astId": 1223,
        "contract": "contracts/EquityManager.sol:EquityManager",
        "label": "cumfundsDistributed",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1226,
        "contract": "contracts/EquityManager.sol:EquityManager",
        "label": "cumfundsToI3",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1230,
        "contract": "contracts/EquityManager.sol:EquityManager",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(EquityStake)1205_storage)dyn_storage": {
        "base": "t_struct(EquityStake)1205_storage",
        "encoding": "dynamic_array",
        "label": "struct EquityManager.EquityStake[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(EquityStake)1205_storage": {
        "encoding": "inplace",
        "label": "struct EquityManager.EquityStake",
        "members": [
          {
            "astId": 1198,
            "contract": "contracts/EquityManager.sol:EquityManager",
            "label": "holder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1200,
            "contract": "contracts/EquityManager.sol:EquityManager",
            "label": "stakePercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1202,
            "contract": "contracts/EquityManager.sol:EquityManager",
            "label": "lastReceived",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1204,
            "contract": "contracts/EquityManager.sol:EquityManager",
            "label": "created",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/EquityManager.sol:EquityManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/EquityManager.sol:EquityManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}