{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_companyTreasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_window",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "StakeManager__ContractUpdateWindowIsNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeManager__ContractUpdateWindowIsOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeManager__InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeManager__StakeHolderAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeManager__StakeHolderDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeManager__StakeIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeManager__StakeLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeManager__TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "equityTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeAdded",
          "type": "uint256"
        }
      ],
      "name": "BeneficiariesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "equityTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeAdded",
          "type": "uint256"
        }
      ],
      "name": "BeneficiaryStakeIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time_distributed",
          "type": "uint256"
        }
      ],
      "name": "FundsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialStake",
          "type": "uint256"
        }
      ],
      "name": "addBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "beneficiaries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "equityTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundsLastReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "equityLastUpdated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "beneficiariesAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "companyTreasuryAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTotalStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeneficiariesAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_holders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_equityTokens",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpdateWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "intervalSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        }
      ],
      "name": "isABeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEndOfIntervalTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fund",
          "type": "address"
        }
      ],
      "name": "setCompanyTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeIncrease",
          "type": "uint256"
        }
      ],
      "name": "updateBeneficiariesStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateWindowSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withinUpdateWindow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdc22827355db5d48c9115a22f472406d70d7d712f57a295358f43863a86a84ab",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2622048",
    "logsBloom": "0x
    "blockHash": "0xa88279eb27496e815de707e11721d1c58564bd5e7c5f8a2c9bb7931d270e923a",
    "transactionHash": "0xdc22827355db5d48c9115a22f472406d70d7d712f57a295358f43863a86a84ab",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xdc22827355db5d48c9115a22f472406d70d7d712f57a295358f43863a86a84ab",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa88279eb27496e815de707e11721d1c58564bd5e7c5f8a2c9bb7931d270e923a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xdc22827355db5d48c9115a22f472406d70d7d712f57a295358f43863a86a84ab",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa88279eb27496e815de707e11721d1c58564bd5e7c5f8a2c9bb7931d270e923a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xdc22827355db5d48c9115a22f472406d70d7d712f57a295358f43863a86a84ab",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xa88279eb27496e815de707e11721d1c58564bd5e7c5f8a2c9bb7931d270e923a"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2622048",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc",
    2592000,
    604800
  ],
  "numDeployments": 1,
  "solcInputHash": "33d6e1d0292b735ebbce05f48709a50b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_companyTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_window\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"StakeManager__ContractUpdateWindowIsNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeManager__ContractUpdateWindowIsOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeManager__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeManager__StakeHolderAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeManager__StakeHolderDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeManager__StakeIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeManager__StakeLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeManager__TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"equityTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"}],\"name\":\"BeneficiariesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"equityTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryStakeIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time_distributed\",\"type\":\"uint256\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialStake\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"equityTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundsLastReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"equityLastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiariesAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyTreasuryAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTotalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiariesAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_equityTokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpdateWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"isABeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEndOfIntervalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"}],\"name\":\"setCompanyTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIncrease\",\"type\":\"uint256\"}],\"name\":\"updateBeneficiariesStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateWindowSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withinUpdateWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"custom:security-contact\":\"abolaji.adedeji@gmail.com\",\"details\":\"There are a total of 1,000,000,000 unit of shares.\",\"kind\":\"dev\",\"methods\":{\"addBeneficiary(address,uint256)\":{\"params\":{\"_holder\":\"The address of the existing beneficiary\",\"_initialStake\":\"The amount to initialise the preportion of the stake\"}},\"getBeneficiariesAddresses()\":{\"returns\":{\"_equityTokens\":\"An array of equity tokens\",\"_holders\":\"An array of addresses of the beneficiaries\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getUpdateWindow()\":{\"returns\":{\"_0\":\"openTimestamp The opening timestamp of the update window\",\"_1\":\"closeTimestamp The closing timestamp of the update window\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isABeneficiary(address)\":{\"params\":{\"_holder\":\"The address to check\"},\"returns\":{\"_0\":\"isABeneficiary whether or not the address is a beneficiary\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setCompanyTreasuryAddress(address)\":{\"params\":{\"_fund\":\"The new address of the Impact 3 fund\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateBeneficiariesStake(address,uint256)\":{\"params\":{\"_holder\":\"The address of the existing beneficiary\",\"_stakeIncrease\":\"The amount to increase the equity tokens by\"}},\"withinUpdateWindow()\":{\"returns\":{\"_0\":\"isOpen Whether the window to update or add new beneficiaries is open\"}}},\"title\":\"An Ethereum Token Purse to distribute funds to beneficiaries.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBeneficiary(address,uint256)\":{\"notice\":\"Adds a new beneficiary with an initial stake\"},\"distributeFunds()\":{\"notice\":\"Distrbute funds to beneficiaries and remainder to Company Treasury\"},\"getBeneficiariesAddresses()\":{\"notice\":\"Gets all beneficiaries of the contract as well as their stake\"},\"getUpdateWindow()\":{\"notice\":\"Calculates the update window intervals\"},\"isABeneficiary(address)\":{\"notice\":\"Checks whether a specific address is a beneficiary of the contract\"},\"pause()\":{\"notice\":\"Pauses the contract so no interactions can be made\"},\"setCompanyTreasuryAddress(address)\":{\"notice\":\"Updates the Company Treasury address\"},\"unpause()\":{\"notice\":\"Unpauses the contract so interactions can be made\"},\"updateBeneficiariesStake(address,uint256)\":{\"notice\":\"Updates an existing beneficiary with a specific stake increase\"},\"withinUpdateWindow()\":{\"notice\":\"Returns whether we are within the update window\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakeManager.sol\":\"StakeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/StakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\nerror StakeManager__StakeLimitExceeded();\\nerror StakeManager__StakeIsZero();\\nerror StakeManager__TransactionFailed();\\nerror StakeManager__InsufficientBalance();\\nerror StakeManager__ContractUpdateWindowIsOpen();\\nerror StakeManager__ContractUpdateWindowIsNotOpen();\\nerror StakeManager__StakeHolderDoesNotExist();\\nerror StakeManager__StakeHolderAlreadyExists();\\n\\n/// @title An Ethereum Token Purse to distribute funds to beneficiaries.\\n/// @dev There are a total of 1,000,000,000 unit of shares.\\n/// @custom:security-contact abolaji.adedeji@gmail.com\\ncontract StakeManager is Pausable, AccessControl, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    // FundsReceived event is triggered when funds are recieved to the contract\\n    event FundsReceived(address indexed addr, uint256 amount);\\n\\n    // FundsDistributed is triggered when funds are distributed from the contract\\n    event FundsDistributed(\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256 time_distributed\\n    );\\n\\n    // BeneficiariesAdded is triggered when a new beneficiary is added to the contract\\n    event BeneficiariesAdded(\\n        address indexed holder,\\n        uint256 equityTokens,\\n        uint256 timeAdded\\n    );\\n\\n    // BeneficiaryStakeIncreased is triggered when an existing beneficiary equity is increased\\n    event BeneficiaryStakeIncreased(\\n        address indexed holder,\\n        uint256 equityTokens,\\n        uint256 timeAdded\\n    );\\n\\n    // Roles\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    // Stake struct manages an equity of each specific beneficiary\\n    struct Stake {\\n        uint256 equityTokens;\\n        uint256 fundsLastReceived;\\n        uint256 equityLastUpdated;\\n    }\\n\\n    // list of beneficiaries addresses\\n    address[] public beneficiariesAddresses;\\n\\n    // beneficiaries maps address to Stake of current beneficiaries\\n    mapping(address => Stake) public beneficiaries;\\n\\n    // the address of the company treasury\\n    address payable public companyTreasuryAddress;\\n\\n    // intervalSeconds is the number of seconds of the update windows e.g 30 days\\n    uint256 public immutable intervalSeconds;\\n    // updateWindowSeconds is number of seconds the interval of each update e.g 7 days\\n    uint256 public immutable updateWindowSeconds;\\n    // maxStake is the total stake in the purse\\n    uint256 private immutable maxStake = 10 ** 9;\\n    // lastEndOfWindowTimestamp is the last time stamp of when the interval ended in seconds\\n    uint256 public lastEndOfIntervalTimestamp;\\n    // currentTotalStake keeps track of the total beneficiary stakes\\n    uint256 public currentTotalStake = 0;\\n\\n    constructor(address _companyTreasury, uint256 _interval, uint256 _window) {\\n        // grant roles to deployer address\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n        _grantRole(MANAGER_ROLE, msg.sender);\\n\\n        // set the companyTreasury address\\n        setCompanyTreasuryAddress(_companyTreasury);\\n\\n        // set the interval and window and current end of interval timestamp\\n        intervalSeconds = _interval;\\n        updateWindowSeconds = _window;\\n        lastEndOfIntervalTimestamp = block.timestamp + intervalSeconds;\\n    }\\n\\n    /// @notice Distrbute funds to beneficiaries and remainder to Company Treasury\\n    function distributeFunds() public whenNotPaused nonReentrant {\\n        if (withinUpdateWindow()) {\\n            revert StakeManager__ContractUpdateWindowIsOpen();\\n        }\\n\\n        uint256 fundsToDistribute = address(this).balance;\\n        uint256 fundsDistributed = 0;\\n\\n        if (fundsToDistribute == 0) {\\n            revert StakeManager__InsufficientBalance();\\n        }\\n        address[] memory currentHolderAddresses = beneficiariesAddresses;\\n        for (uint256 i = 0; i < currentHolderAddresses.length; ++i) {\\n            // calculate amount to distribute\\n            uint256 equityTokens = beneficiaries[currentHolderAddresses[i]]\\n                .equityTokens;\\n            uint256 amount = fundsToDistribute.mul(equityTokens).div(maxStake);\\n\\n            // update funds last received with timestamp\\n            beneficiaries[currentHolderAddresses[i]].fundsLastReceived = block\\n                .timestamp;\\n            fundsDistributed += amount;\\n\\n            // send value to beneficiary\\n            sendValue(payable(beneficiariesAddresses[i]), amount);\\n            emit FundsDistributed(\\n                beneficiariesAddresses[i],\\n                amount,\\n                block.timestamp\\n            );\\n        }\\n\\n        // update last timestamp with previous timestamp plus interval\\n        (, uint256 _closetimestamp) = getUpdateWindow();\\n        if (block.timestamp >= _closetimestamp) {\\n            lastEndOfIntervalTimestamp += intervalSeconds;\\n        } else {\\n            lastEndOfIntervalTimestamp = lastEndOfIntervalTimestamp;\\n        }\\n\\n        // send remaining funds to company treasury fund address\\n        sendValue(companyTreasuryAddress, address(this).balance);\\n        emit FundsDistributed(\\n            companyTreasuryAddress,\\n            fundsDistributed,\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @notice Updates an existing beneficiary with a specific stake increase\\n    /// @param _holder The address of the existing beneficiary\\n    /// @param _stakeIncrease The amount to increase the equity tokens by\\n    function updateBeneficiariesStake(\\n        address _holder,\\n        uint256 _stakeIncrease\\n    ) public whenNotPaused onlyRole(MANAGER_ROLE) {\\n        // only continue if the update window is open\\n        if (!withinUpdateWindow()) {\\n            revert StakeManager__ContractUpdateWindowIsNotOpen();\\n        }\\n\\n        // check if the stake is zero\\n        if (_stakeIncrease <= 0) {\\n            revert StakeManager__StakeIsZero();\\n        }\\n\\n        // check if the new total stake is greater than maximum limit\\n        uint256 newTotalStake = currentTotalStake.add(_stakeIncrease);\\n        if (newTotalStake > maxStake) {\\n            revert StakeManager__StakeLimitExceeded();\\n        }\\n\\n        // check if beneficiary exists\\n        if (beneficiaries[_holder].equityTokens <= 0) {\\n            revert StakeManager__StakeHolderDoesNotExist();\\n        }\\n\\n        // Updating equities of existing beneficiaries\\n        uint256 newStake = beneficiaries[_holder].equityTokens.add(\\n            _stakeIncrease\\n        );\\n        beneficiaries[_holder].equityTokens = newStake;\\n        beneficiaries[_holder].equityLastUpdated = block.timestamp;\\n        currentTotalStake += _stakeIncrease;\\n\\n        // emit beneficiary stake increased event\\n        emit BeneficiaryStakeIncreased(\\n            _holder,\\n            _stakeIncrease,\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @notice Adds a new beneficiary with an initial stake\\n    /// @param _holder The address of the existing beneficiary\\n    /// @param _initialStake The amount to initialise the preportion of the stake\\n    function addBeneficiary(\\n        address _holder,\\n        uint256 _initialStake\\n    ) public whenNotPaused onlyRole(MANAGER_ROLE) {\\n        // only continue if the update window is open\\n        if (!withinUpdateWindow()) {\\n            revert StakeManager__ContractUpdateWindowIsNotOpen();\\n        }\\n\\n        // check if the stake is zero\\n        if (_initialStake <= 0) {\\n            revert StakeManager__StakeIsZero();\\n        }\\n\\n        // check if the new total stake is greater than the limit\\n        uint256 newTotalStake = currentTotalStake.add(_initialStake);\\n        if (newTotalStake > maxStake) {\\n            revert StakeManager__StakeLimitExceeded();\\n        }\\n\\n        // check if beneficiary already exists\\n        if (beneficiaries[_holder].equityTokens != 0) {\\n            revert StakeManager__StakeHolderAlreadyExists();\\n        }\\n\\n        // add beneficiary to mapping\\n        beneficiaries[_holder] = Stake(\\n            _initialStake,\\n            block.timestamp,\\n            block.timestamp\\n        );\\n        beneficiariesAddresses.push(_holder);\\n        currentTotalStake += _initialStake;\\n\\n        // emit beneficiary added map\\n        emit BeneficiariesAdded(_holder, _initialStake, block.timestamp);\\n    }\\n\\n    /// @notice Updates the Company Treasury address\\n    /// @param _fund The new address of the Impact 3 fund\\n    function setCompanyTreasuryAddress(\\n        address _fund\\n    ) public onlyRole(MANAGER_ROLE) {\\n        companyTreasuryAddress = payable(_fund);\\n    }\\n\\n    /// @notice Returns whether we are within the update window\\n    /// @return isOpen Whether the window to update or add new beneficiaries is open\\n    function withinUpdateWindow() public view returns (bool) {\\n        (uint256 _opentimestamp, uint256 _closetimestamp) = getUpdateWindow();\\n\\n        if (\\n            block.timestamp >= _opentimestamp &&\\n            block.timestamp < _closetimestamp\\n        ) {\\n            return true;\\n        } else if (block.timestamp < lastEndOfIntervalTimestamp) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Calculates the update window intervals\\n    /// @return openTimestamp The opening timestamp of the update window\\n    /// @return closeTimestamp The closing timestamp of the update window\\n    function getUpdateWindow() public view returns (uint256, uint256) {\\n        uint256 _opentimestamp = lastEndOfIntervalTimestamp + intervalSeconds;\\n        uint256 _closetimestamp = lastEndOfIntervalTimestamp +\\n            (intervalSeconds + updateWindowSeconds);\\n        return (_opentimestamp, _closetimestamp);\\n    }\\n\\n    /// @notice Pauses the contract so no interactions can be made\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the contract so interactions can be made\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @notice When funds are received by the contract we emit an event\\n    receive() external payable {\\n        emit FundsReceived(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Sends an address funds from this contract\\n    /// @param recipient The address to send funds to\\n    /// @param amount The amount of funds to send\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert StakeManager__InsufficientBalance();\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert StakeManager__TransactionFailed();\\n        }\\n    }\\n\\n    /// @notice Gets all beneficiaries of the contract as well as their stake\\n    /// @return _holders An array of addresses of the beneficiaries\\n    /// @return _equityTokens An array of equity tokens\\n    function getBeneficiariesAddresses()\\n        external\\n        view\\n        returns (address[] memory _holders, uint256[] memory _equityTokens)\\n    {\\n        _holders = new address[](beneficiariesAddresses.length);\\n        _holders = beneficiariesAddresses;\\n\\n        _equityTokens = new uint256[](_holders.length);\\n        for (uint256 i = 0; i < _holders.length; ++i) {\\n            _equityTokens[i] = beneficiaries[_holders[i]].equityTokens;\\n        }\\n\\n        return (_holders, _equityTokens);\\n    }\\n\\n    /// @notice Checks whether a specific address is a beneficiary of the contract\\n    /// @param _holder The address to check\\n    /// @return isABeneficiary whether or not the address is a beneficiary\\n    function isABeneficiary(address _holder) external view returns (bool) {\\n        if (beneficiaries[_holder].equityTokens <= 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x420aa743848e9d5d307e2fffaa294ae159cc7820d45420a2314e7a2d0317976c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052633b9aca0060c09081525060006007553480156200002157600080fd5b506040516200369b3803806200369b8339818101604052810190620000479190620006e5565b60008060006101000a81548160ff02191690831515021790555060016002819055506200007e6000801b336200012260201b60201c565b620000b07f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336200012260201b60201c565b620000e27f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08336200012260201b60201c565b620000f3836200021360201b60201c565b81608081815250508060a081815250506080514262000113919062000770565b60068190555050505062000aec565b6200013482826200028a60201b60201c565b6200020f57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001b4620002f560201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086200024581620002fd60201b60201c565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6200031e8162000312620002f560201b60201c565b6200032160201b60201c565b50565b6200033382826200028a60201b60201c565b620003e157620003668173ffffffffffffffffffffffffffffffffffffffff166014620003e560201b620017f11760201c565b620003818360001c6020620003e560201b620017f11760201c565b60405160200162000394929190620008c4565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003d8919062000969565b60405180910390fd5b5050565b606060006002836002620003fa91906200098d565b62000406919062000770565b67ffffffffffffffff811115620004225762000421620009ee565b5b6040519080825280601f01601f191660200182016040528015620004555781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811062000490576200048f62000a1d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110620004f757620004f662000a1d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026200053991906200098d565b62000545919062000770565b90505b6001811115620005ef577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106200058b576200058a62000a1d565b5b1a60f81b828281518110620005a557620005a462000a1d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080620005e79062000a4c565b905062000548565b506000841462000636576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200062d9062000aca565b60405180910390fd5b8091505092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620006728262000645565b9050919050565b620006848162000665565b81146200069057600080fd5b50565b600081519050620006a48162000679565b92915050565b6000819050919050565b620006bf81620006aa565b8114620006cb57600080fd5b50565b600081519050620006df81620006b4565b92915050565b60008060006060848603121562000701576200070062000640565b5b6000620007118682870162000693565b93505060206200072486828701620006ce565b92505060406200073786828701620006ce565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200077d82620006aa565b91506200078a83620006aa565b9250828201905080821115620007a557620007a462000741565b5b92915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000620007ee601783620007ab565b9150620007fb82620007b6565b601782019050919050565b600081519050919050565b60005b838110156200083157808201518184015260208101905062000814565b60008484015250505050565b60006200084a8262000806565b620008568185620007ab565b93506200086881856020860162000811565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000620008ac601183620007ab565b9150620008b98262000874565b601182019050919050565b6000620008d182620007df565b9150620008df82856200083d565b9150620008ec826200089d565b9150620008fa82846200083d565b91508190509392505050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b6000620009358262000806565b62000941818562000906565b93506200095381856020860162000811565b6200095e8162000917565b840191505092915050565b6000602082019050818103600083015262000985818462000928565b905092915050565b60006200099a82620006aa565b9150620009a783620006aa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620009e357620009e262000741565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600062000a5982620006aa565b91506000820362000a6f5762000a6e62000741565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600062000ab260208362000906565b915062000abf8262000a7a565b602082019050919050565b6000602082019050818103600083015262000ae58162000aa3565b9050919050565b60805160a05160c051612b5562000b466000396000818161081401528181610cd40152611284015260008181610feb01526116c3015260008181610e8501528181610fb90152818161100c01526110680152612b556000f3fe6080604052600436106101a05760003560e01c806385d923ae116100ec578063c8f29b041161008a578063d547741f11610064578063d547741f146105ef578063d9724ffb14610618578063e63ab1e914610655578063ec87621c14610680576101f5565b8063c8f29b041461055c578063ce4843e914610587578063d2414958146105b2576101f5565b806396074e70116100c657806396074e70146104b1578063a128f355146104da578063a217fddf14610505578063be8431f914610530576101f5565b806385d923ae1461042057806391d14854146104495780639426d55514610486576101f5565b80633a6a4d2e11610159578063408a355011610133578063408a3550146103875780635c975abb146103b35780637d1cd04f146103de5780638456cb5914610409576101f5565b80633a6a4d2e1461032e5780633c915af7146103455780633f4ba83a14610370576101f5565b806301567739146101fa57806301ffc9a7146102395780630505a00f14610276578063248a9ca31461029f5780632f2ff15d146102dc57806336568abe14610305576101f5565b366101f5573373ffffffffffffffffffffffffffffffffffffffff167f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f346040516101eb9190611fa6565b60405180910390a2005b600080fd5b34801561020657600080fd5b50610221600480360381019061021c9190612024565b6106ab565b60405161023093929190612051565b60405180910390f35b34801561024557600080fd5b50610260600480360381019061025b91906120e0565b6106d5565b60405161026d9190612128565b60405180910390f35b34801561028257600080fd5b5061029d6004803603810190610298919061216f565b61074f565b005b3480156102ab57600080fd5b506102c660048036038101906102c191906121e5565b610a3f565b6040516102d39190612221565b60405180910390f35b3480156102e857600080fd5b5061030360048036038101906102fe919061223c565b610a5f565b005b34801561031157600080fd5b5061032c6004803603810190610327919061223c565b610a80565b005b34801561033a57600080fd5b50610343610b03565b005b34801561035157600080fd5b5061035a610f77565b6040516103679190611fa6565b60405180910390f35b34801561037c57600080fd5b50610385610f7d565b005b34801561039357600080fd5b5061039c610fb2565b6040516103aa92919061227c565b60405180910390f35b3480156103bf57600080fd5b506103c8611050565b6040516103d59190612128565b60405180910390f35b3480156103ea57600080fd5b506103f3611066565b6040516104009190611fa6565b60405180910390f35b34801561041557600080fd5b5061041e61108a565b005b34801561042c57600080fd5b5061044760048036038101906104429190612024565b6110bf565b005b34801561045557600080fd5b50610470600480360381019061046b919061223c565b61112e565b60405161047d9190612128565b60405180910390f35b34801561049257600080fd5b5061049b611199565b6040516104a891906122c6565b60405180910390f35b3480156104bd57600080fd5b506104d860048036038101906104d3919061216f565b6111bf565b005b3480156104e657600080fd5b506104ef6114a5565b6040516104fc9190612128565b60405180910390f35b34801561051157600080fd5b5061051a6114f4565b6040516105279190612221565b60405180910390f35b34801561053c57600080fd5b506105456114fb565b60405161055392919061245d565b60405180910390f35b34801561056857600080fd5b506105716116c1565b60405161057e9190611fa6565b60405180910390f35b34801561059357600080fd5b5061059c6116e5565b6040516105a99190611fa6565b60405180910390f35b3480156105be57600080fd5b506105d960048036038101906105d49190612024565b6116eb565b6040516105e69190612128565b60405180910390f35b3480156105fb57600080fd5b506106166004803603810190610611919061223c565b611749565b005b34801561062457600080fd5b5061063f600480360381019061063a9190612494565b61176a565b60405161064c91906124d0565b60405180910390f35b34801561066157600080fd5b5061066a6117a9565b6040516106779190612221565b60405180910390f35b34801561068c57600080fd5b506106956117cd565b6040516106a29190612221565b60405180910390f35b60046020528060005260406000206000915090508060000154908060010154908060020154905083565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610748575061074782611a2d565b5b9050919050565b610757611a97565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861078181611ae1565b6107896114a5565b6107bf576040517f9389fad000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082116107f9576040517f1d4227f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061081083600754611af590919063ffffffff16565b90507f000000000000000000000000000000000000000000000000000000000000000081111561086c576040517f80a4d17800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116108e8576040517fc8a988fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061093f84600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611af590919063ffffffff16565b905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555083600760008282546109e1919061251a565b925050819055508473ffffffffffffffffffffffffffffffffffffffff167ff1b87f4a688417d87b0dd9c0569040438160e0cd40b36d472c0f65069682e9908542604051610a3092919061227c565b60405180910390a25050505050565b600060016000838152602001908152602001600020600101549050919050565b610a6882610a3f565b610a7181611ae1565b610a7b8383611b0b565b505050565b610a88611beb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aec906125d1565b60405180910390fd5b610aff8282611bf3565b5050565b610b0b611a97565b6002805403610b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b469061263d565b60405180910390fd5b60028081905550610b5e6114a5565b15610b95576040517f05d27f9800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004790506000808203610bd5576040517f4890cfae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003805480602002602001604051908101604052809291908181526020018280548015610c5957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c0f575b5050505050905060005b8151811015610e6e57600060046000848481518110610c8557610c8461265d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490506000610d147f0000000000000000000000000000000000000000000000000000000000000000610d068489611cd590919063ffffffff16565b611ceb90919063ffffffff16565b90504260046000868681518110610d2e57610d2d61265d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508085610d83919061251a565b9450610dcd60038481548110610d9c57610d9b61265d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682611d01565b60038381548110610de157610de061265d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f080babe757d4e5c7db3b7bd10606a7bf07a9857f660977ada6ca7a4d329376c88242604051610e5392919061227c565b60405180910390a2505080610e679061268c565b9050610c63565b506000610e79610fb2565b915050804210610ec1577f000000000000000000000000000000000000000000000000000000000000000060066000828254610eb5919061251a565b92505081905550610ecb565b6006546006819055505b610ef7600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1647611d01565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f080babe757d4e5c7db3b7bd10606a7bf07a9857f660977ada6ca7a4d329376c88442604051610f6192919061227c565b60405180910390a2505050506001600281905550565b60065481565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610fa781611ae1565b610faf611de3565b50565b60008060007f0000000000000000000000000000000000000000000000000000000000000000600654610fe5919061251a565b905060007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611035919061251a565b600654611042919061251a565b905081819350935050509091565b60008060009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6110b481611ae1565b6110bc611e45565b50565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086110e981611ae1565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6111c7611a97565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086111f181611ae1565b6111f96114a5565b61122f576040517f9389fad000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008211611269576040517f1d4227f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061128083600754611af590919063ffffffff16565b90507f00000000000000000000000000000000000000000000000000000000000000008111156112dc576040517f80a4d17800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414611358576040517f2912360200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806060016040528084815260200142815260200142815250600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506003849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260076000828254611448919061251a565b925050819055508373ffffffffffffffffffffffffffffffffffffffff167face1893c759fc46036b7fdd20805d2476c58b2e6d1e56aad3331ee5d2275393e844260405161149792919061227c565b60405180910390a250505050565b60008060006114b2610fb2565b915091508142101580156114c557508042105b156114d5576001925050506114f1565b6006544210156114ea576001925050506114f1565b6000925050505b90565b6000801b81565b60608060038054905067ffffffffffffffff81111561151d5761151c6126d4565b5b60405190808252806020026020018201604052801561154b5781602001602082028036833780820191505090505b50915060038054806020026020016040519081016040528092919081815260200182805480156115d057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611586575b50505050509150815167ffffffffffffffff8111156115f2576115f16126d4565b5b6040519080825280602002602001820160405280156116205781602001602082028036833780820191505090505b50905060005b82518110156116bc57600460008483815181106116465761164561265d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015482828151811061169f5761169e61265d565b5b602002602001018181525050806116b59061268c565b9050611626565b509091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60075481565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541161173f5760009050611744565b600190505b919050565b61175282610a3f565b61175b81611ae1565b6117658383611bf3565b505050565b6003818154811061177a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b6060600060028360026118049190612703565b61180e919061251a565b67ffffffffffffffff811115611827576118266126d4565b5b6040519080825280601f01601f1916602001820160405280156118595781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106118915761189061265d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106118f5576118f461265d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026119359190612703565b61193f919061251a565b90505b60018111156119df577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106119815761198061265d565b5b1a60f81b8282815181106119985761199761265d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806119d89061275d565b9050611942565b5060008414611a23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1a906127d2565b60405180910390fd5b8091505092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611a9f611050565b15611adf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad69061283e565b60405180910390fd5b565b611af281611aed611beb565b611ea7565b50565b60008183611b03919061251a565b905092915050565b611b15828261112e565b611be757600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611b8c611beb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b611bfd828261112e565b15611cd15760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611c76611beb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008183611ce39190612703565b905092915050565b60008183611cf9919061288d565b905092915050565b80471015611d3b576040517f4890cfae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051611d61906128ef565b60006040518083038185875af1925050503d8060008114611d9e576040519150601f19603f3d011682016040523d82523d6000602084013e611da3565b606091505b5050905080611dde576040517f41f5ae4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b611deb611f44565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e2e611beb565b604051611e3b91906124d0565b60405180910390a1565b611e4d611a97565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e90611beb565b604051611e9d91906124d0565b60405180910390a1565b611eb1828261112e565b611f4057611ed68173ffffffffffffffffffffffffffffffffffffffff1660146117f1565b611ee48360001c60206117f1565b604051602001611ef5929190612a0d565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f379190612a91565b60405180910390fd5b5050565b611f4c611050565b611f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8290612aff565b60405180910390fd5b565b6000819050919050565b611fa081611f8d565b82525050565b6000602082019050611fbb6000830184611f97565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ff182611fc6565b9050919050565b61200181611fe6565b811461200c57600080fd5b50565b60008135905061201e81611ff8565b92915050565b60006020828403121561203a57612039611fc1565b5b60006120488482850161200f565b91505092915050565b60006060820190506120666000830186611f97565b6120736020830185611f97565b6120806040830184611f97565b949350505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6120bd81612088565b81146120c857600080fd5b50565b6000813590506120da816120b4565b92915050565b6000602082840312156120f6576120f5611fc1565b5b6000612104848285016120cb565b91505092915050565b60008115159050919050565b6121228161210d565b82525050565b600060208201905061213d6000830184612119565b92915050565b61214c81611f8d565b811461215757600080fd5b50565b60008135905061216981612143565b92915050565b6000806040838503121561218657612185611fc1565b5b60006121948582860161200f565b92505060206121a58582860161215a565b9150509250929050565b6000819050919050565b6121c2816121af565b81146121cd57600080fd5b50565b6000813590506121df816121b9565b92915050565b6000602082840312156121fb576121fa611fc1565b5b6000612209848285016121d0565b91505092915050565b61221b816121af565b82525050565b60006020820190506122366000830184612212565b92915050565b6000806040838503121561225357612252611fc1565b5b6000612261858286016121d0565b92505060206122728582860161200f565b9150509250929050565b60006040820190506122916000830185611f97565b61229e6020830184611f97565b9392505050565b60006122b082611fc6565b9050919050565b6122c0816122a5565b82525050565b60006020820190506122db60008301846122b7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61231681611fe6565b82525050565b6000612328838361230d565b60208301905092915050565b6000602082019050919050565b600061234c826122e1565b61235681856122ec565b9350612361836122fd565b8060005b83811015612392578151612379888261231c565b975061238483612334565b925050600181019050612365565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123d481611f8d565b82525050565b60006123e683836123cb565b60208301905092915050565b6000602082019050919050565b600061240a8261239f565b61241481856123aa565b935061241f836123bb565b8060005b8381101561245057815161243788826123da565b9750612442836123f2565b925050600181019050612423565b5085935050505092915050565b600060408201905081810360008301526124778185612341565b9050818103602083015261248b81846123ff565b90509392505050565b6000602082840312156124aa576124a9611fc1565b5b60006124b88482850161215a565b91505092915050565b6124ca81611fe6565b82525050565b60006020820190506124e560008301846124c1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061252582611f8d565b915061253083611f8d565b9250828201905080821115612548576125476124eb565b5b92915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006125bb602f8361254e565b91506125c68261255f565b604082019050919050565b600060208201905081810360008301526125ea816125ae565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612627601f8361254e565b9150612632826125f1565b602082019050919050565b600060208201905081810360008301526126568161261a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061269782611f8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036126c9576126c86124eb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061270e82611f8d565b915061271983611f8d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612752576127516124eb565b5b828202905092915050565b600061276882611f8d565b91506000820361277b5761277a6124eb565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006127bc60208361254e565b91506127c782612786565b602082019050919050565b600060208201905081810360008301526127eb816127af565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061282860108361254e565b9150612833826127f2565b602082019050919050565b600060208201905081810360008301526128578161281b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061289882611f8d565b91506128a383611f8d565b9250826128b3576128b261285e565b5b828204905092915050565b600081905092915050565b50565b60006128d96000836128be565b91506128e4826128c9565b600082019050919050565b60006128fa826128cc565b9150819050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612945601783612904565b91506129508261290f565b601782019050919050565b600081519050919050565b60005b83811015612984578082015181840152602081019050612969565b60008484015250505050565b600061299b8261295b565b6129a58185612904565b93506129b5818560208601612966565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006129f7601183612904565b9150612a02826129c1565b601182019050919050565b6000612a1882612938565b9150612a248285612990565b9150612a2f826129ea565b9150612a3b8284612990565b91508190509392505050565b6000601f19601f8301169050919050565b6000612a638261295b565b612a6d818561254e565b9350612a7d818560208601612966565b612a8681612a47565b840191505092915050565b60006020820190508181036000830152612aab8184612a58565b905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612ae960148361254e565b9150612af482612ab3565b602082019050919050565b60006020820190508181036000830152612b1881612adc565b905091905056fea264697066735822122087a935c148a95399a4ae037a7fc492f0b96f8c9137e4473ad3858b180bf27e9364736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c806385d923ae116100ec578063c8f29b041161008a578063d547741f11610064578063d547741f146105ef578063d9724ffb14610618578063e63ab1e914610655578063ec87621c14610680576101f5565b8063c8f29b041461055c578063ce4843e914610587578063d2414958146105b2576101f5565b806396074e70116100c657806396074e70146104b1578063a128f355146104da578063a217fddf14610505578063be8431f914610530576101f5565b806385d923ae1461042057806391d14854146104495780639426d55514610486576101f5565b80633a6a4d2e11610159578063408a355011610133578063408a3550146103875780635c975abb146103b35780637d1cd04f146103de5780638456cb5914610409576101f5565b80633a6a4d2e1461032e5780633c915af7146103455780633f4ba83a14610370576101f5565b806301567739146101fa57806301ffc9a7146102395780630505a00f14610276578063248a9ca31461029f5780632f2ff15d146102dc57806336568abe14610305576101f5565b366101f5573373ffffffffffffffffffffffffffffffffffffffff167f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f346040516101eb9190611fa6565b60405180910390a2005b600080fd5b34801561020657600080fd5b50610221600480360381019061021c9190612024565b6106ab565b60405161023093929190612051565b60405180910390f35b34801561024557600080fd5b50610260600480360381019061025b91906120e0565b6106d5565b60405161026d9190612128565b60405180910390f35b34801561028257600080fd5b5061029d6004803603810190610298919061216f565b61074f565b005b3480156102ab57600080fd5b506102c660048036038101906102c191906121e5565b610a3f565b6040516102d39190612221565b60405180910390f35b3480156102e857600080fd5b5061030360048036038101906102fe919061223c565b610a5f565b005b34801561031157600080fd5b5061032c6004803603810190610327919061223c565b610a80565b005b34801561033a57600080fd5b50610343610b03565b005b34801561035157600080fd5b5061035a610f77565b6040516103679190611fa6565b60405180910390f35b34801561037c57600080fd5b50610385610f7d565b005b34801561039357600080fd5b5061039c610fb2565b6040516103aa92919061227c565b60405180910390f35b3480156103bf57600080fd5b506103c8611050565b6040516103d59190612128565b60405180910390f35b3480156103ea57600080fd5b506103f3611066565b6040516104009190611fa6565b60405180910390f35b34801561041557600080fd5b5061041e61108a565b005b34801561042c57600080fd5b5061044760048036038101906104429190612024565b6110bf565b005b34801561045557600080fd5b50610470600480360381019061046b919061223c565b61112e565b60405161047d9190612128565b60405180910390f35b34801561049257600080fd5b5061049b611199565b6040516104a891906122c6565b60405180910390f35b3480156104bd57600080fd5b506104d860048036038101906104d3919061216f565b6111bf565b005b3480156104e657600080fd5b506104ef6114a5565b6040516104fc9190612128565b60405180910390f35b34801561051157600080fd5b5061051a6114f4565b6040516105279190612221565b60405180910390f35b34801561053c57600080fd5b506105456114fb565b60405161055392919061245d565b60405180910390f35b34801561056857600080fd5b506105716116c1565b60405161057e9190611fa6565b60405180910390f35b34801561059357600080fd5b5061059c6116e5565b6040516105a99190611fa6565b60405180910390f35b3480156105be57600080fd5b506105d960048036038101906105d49190612024565b6116eb565b6040516105e69190612128565b60405180910390f35b3480156105fb57600080fd5b506106166004803603810190610611919061223c565b611749565b005b34801561062457600080fd5b5061063f600480360381019061063a9190612494565b61176a565b60405161064c91906124d0565b60405180910390f35b34801561066157600080fd5b5061066a6117a9565b6040516106779190612221565b60405180910390f35b34801561068c57600080fd5b506106956117cd565b6040516106a29190612221565b60405180910390f35b60046020528060005260406000206000915090508060000154908060010154908060020154905083565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610748575061074782611a2d565b5b9050919050565b610757611a97565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861078181611ae1565b6107896114a5565b6107bf576040517f9389fad000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082116107f9576040517f1d4227f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061081083600754611af590919063ffffffff16565b90507f000000000000000000000000000000000000000000000000000000000000000081111561086c576040517f80a4d17800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116108e8576040517fc8a988fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061093f84600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611af590919063ffffffff16565b905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555083600760008282546109e1919061251a565b925050819055508473ffffffffffffffffffffffffffffffffffffffff167ff1b87f4a688417d87b0dd9c0569040438160e0cd40b36d472c0f65069682e9908542604051610a3092919061227c565b60405180910390a25050505050565b600060016000838152602001908152602001600020600101549050919050565b610a6882610a3f565b610a7181611ae1565b610a7b8383611b0b565b505050565b610a88611beb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aec906125d1565b60405180910390fd5b610aff8282611bf3565b5050565b610b0b611a97565b6002805403610b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b469061263d565b60405180910390fd5b60028081905550610b5e6114a5565b15610b95576040517f05d27f9800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004790506000808203610bd5576040517f4890cfae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003805480602002602001604051908101604052809291908181526020018280548015610c5957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c0f575b5050505050905060005b8151811015610e6e57600060046000848481518110610c8557610c8461265d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490506000610d147f0000000000000000000000000000000000000000000000000000000000000000610d068489611cd590919063ffffffff16565b611ceb90919063ffffffff16565b90504260046000868681518110610d2e57610d2d61265d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508085610d83919061251a565b9450610dcd60038481548110610d9c57610d9b61265d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682611d01565b60038381548110610de157610de061265d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f080babe757d4e5c7db3b7bd10606a7bf07a9857f660977ada6ca7a4d329376c88242604051610e5392919061227c565b60405180910390a2505080610e679061268c565b9050610c63565b506000610e79610fb2565b915050804210610ec1577f000000000000000000000000000000000000000000000000000000000000000060066000828254610eb5919061251a565b92505081905550610ecb565b6006546006819055505b610ef7600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1647611d01565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f080babe757d4e5c7db3b7bd10606a7bf07a9857f660977ada6ca7a4d329376c88442604051610f6192919061227c565b60405180910390a2505050506001600281905550565b60065481565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610fa781611ae1565b610faf611de3565b50565b60008060007f0000000000000000000000000000000000000000000000000000000000000000600654610fe5919061251a565b905060007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611035919061251a565b600654611042919061251a565b905081819350935050509091565b60008060009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6110b481611ae1565b6110bc611e45565b50565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086110e981611ae1565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6111c7611a97565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086111f181611ae1565b6111f96114a5565b61122f576040517f9389fad000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008211611269576040517f1d4227f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061128083600754611af590919063ffffffff16565b90507f00000000000000000000000000000000000000000000000000000000000000008111156112dc576040517f80a4d17800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414611358576040517f2912360200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806060016040528084815260200142815260200142815250600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506003849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260076000828254611448919061251a565b925050819055508373ffffffffffffffffffffffffffffffffffffffff167face1893c759fc46036b7fdd20805d2476c58b2e6d1e56aad3331ee5d2275393e844260405161149792919061227c565b60405180910390a250505050565b60008060006114b2610fb2565b915091508142101580156114c557508042105b156114d5576001925050506114f1565b6006544210156114ea576001925050506114f1565b6000925050505b90565b6000801b81565b60608060038054905067ffffffffffffffff81111561151d5761151c6126d4565b5b60405190808252806020026020018201604052801561154b5781602001602082028036833780820191505090505b50915060038054806020026020016040519081016040528092919081815260200182805480156115d057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611586575b50505050509150815167ffffffffffffffff8111156115f2576115f16126d4565b5b6040519080825280602002602001820160405280156116205781602001602082028036833780820191505090505b50905060005b82518110156116bc57600460008483815181106116465761164561265d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015482828151811061169f5761169e61265d565b5b602002602001018181525050806116b59061268c565b9050611626565b509091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60075481565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541161173f5760009050611744565b600190505b919050565b61175282610a3f565b61175b81611ae1565b6117658383611bf3565b505050565b6003818154811061177a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b6060600060028360026118049190612703565b61180e919061251a565b67ffffffffffffffff811115611827576118266126d4565b5b6040519080825280601f01601f1916602001820160405280156118595781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106118915761189061265d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106118f5576118f461265d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026119359190612703565b61193f919061251a565b90505b60018111156119df577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106119815761198061265d565b5b1a60f81b8282815181106119985761199761265d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806119d89061275d565b9050611942565b5060008414611a23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1a906127d2565b60405180910390fd5b8091505092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611a9f611050565b15611adf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad69061283e565b60405180910390fd5b565b611af281611aed611beb565b611ea7565b50565b60008183611b03919061251a565b905092915050565b611b15828261112e565b611be757600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611b8c611beb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b611bfd828261112e565b15611cd15760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611c76611beb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008183611ce39190612703565b905092915050565b60008183611cf9919061288d565b905092915050565b80471015611d3b576040517f4890cfae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051611d61906128ef565b60006040518083038185875af1925050503d8060008114611d9e576040519150601f19603f3d011682016040523d82523d6000602084013e611da3565b606091505b5050905080611dde576040517f41f5ae4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b611deb611f44565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e2e611beb565b604051611e3b91906124d0565b60405180910390a1565b611e4d611a97565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e90611beb565b604051611e9d91906124d0565b60405180910390a1565b611eb1828261112e565b611f4057611ed68173ffffffffffffffffffffffffffffffffffffffff1660146117f1565b611ee48360001c60206117f1565b604051602001611ef5929190612a0d565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f379190612a91565b60405180910390fd5b5050565b611f4c611050565b611f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8290612aff565b60405180910390fd5b565b6000819050919050565b611fa081611f8d565b82525050565b6000602082019050611fbb6000830184611f97565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ff182611fc6565b9050919050565b61200181611fe6565b811461200c57600080fd5b50565b60008135905061201e81611ff8565b92915050565b60006020828403121561203a57612039611fc1565b5b60006120488482850161200f565b91505092915050565b60006060820190506120666000830186611f97565b6120736020830185611f97565b6120806040830184611f97565b949350505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6120bd81612088565b81146120c857600080fd5b50565b6000813590506120da816120b4565b92915050565b6000602082840312156120f6576120f5611fc1565b5b6000612104848285016120cb565b91505092915050565b60008115159050919050565b6121228161210d565b82525050565b600060208201905061213d6000830184612119565b92915050565b61214c81611f8d565b811461215757600080fd5b50565b60008135905061216981612143565b92915050565b6000806040838503121561218657612185611fc1565b5b60006121948582860161200f565b92505060206121a58582860161215a565b9150509250929050565b6000819050919050565b6121c2816121af565b81146121cd57600080fd5b50565b6000813590506121df816121b9565b92915050565b6000602082840312156121fb576121fa611fc1565b5b6000612209848285016121d0565b91505092915050565b61221b816121af565b82525050565b60006020820190506122366000830184612212565b92915050565b6000806040838503121561225357612252611fc1565b5b6000612261858286016121d0565b92505060206122728582860161200f565b9150509250929050565b60006040820190506122916000830185611f97565b61229e6020830184611f97565b9392505050565b60006122b082611fc6565b9050919050565b6122c0816122a5565b82525050565b60006020820190506122db60008301846122b7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61231681611fe6565b82525050565b6000612328838361230d565b60208301905092915050565b6000602082019050919050565b600061234c826122e1565b61235681856122ec565b9350612361836122fd565b8060005b83811015612392578151612379888261231c565b975061238483612334565b925050600181019050612365565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123d481611f8d565b82525050565b60006123e683836123cb565b60208301905092915050565b6000602082019050919050565b600061240a8261239f565b61241481856123aa565b935061241f836123bb565b8060005b8381101561245057815161243788826123da565b9750612442836123f2565b925050600181019050612423565b5085935050505092915050565b600060408201905081810360008301526124778185612341565b9050818103602083015261248b81846123ff565b90509392505050565b6000602082840312156124aa576124a9611fc1565b5b60006124b88482850161215a565b91505092915050565b6124ca81611fe6565b82525050565b60006020820190506124e560008301846124c1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061252582611f8d565b915061253083611f8d565b9250828201905080821115612548576125476124eb565b5b92915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006125bb602f8361254e565b91506125c68261255f565b604082019050919050565b600060208201905081810360008301526125ea816125ae565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612627601f8361254e565b9150612632826125f1565b602082019050919050565b600060208201905081810360008301526126568161261a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061269782611f8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036126c9576126c86124eb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061270e82611f8d565b915061271983611f8d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612752576127516124eb565b5b828202905092915050565b600061276882611f8d565b91506000820361277b5761277a6124eb565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006127bc60208361254e565b91506127c782612786565b602082019050919050565b600060208201905081810360008301526127eb816127af565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061282860108361254e565b9150612833826127f2565b602082019050919050565b600060208201905081810360008301526128578161281b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061289882611f8d565b91506128a383611f8d565b9250826128b3576128b261285e565b5b828204905092915050565b600081905092915050565b50565b60006128d96000836128be565b91506128e4826128c9565b600082019050919050565b60006128fa826128cc565b9150819050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612945601783612904565b91506129508261290f565b601782019050919050565b600081519050919050565b60005b83811015612984578082015181840152602081019050612969565b60008484015250505050565b600061299b8261295b565b6129a58185612904565b93506129b5818560208601612966565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006129f7601183612904565b9150612a02826129c1565b601182019050919050565b6000612a1882612938565b9150612a248285612990565b9150612a2f826129ea565b9150612a3b8284612990565b91508190509392505050565b6000601f19601f8301169050919050565b6000612a638261295b565b612a6d818561254e565b9350612a7d818560208601612966565b612a8681612a47565b840191505092915050565b60006020820190508181036000830152612aab8184612a58565b905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612ae960148361254e565b9150612af482612ab3565b602082019050919050565b60006020820190508181036000830152612b1881612adc565b905091905056fea264697066735822122087a935c148a95399a4ae037a7fc492f0b96f8c9137e4473ad3858b180bf27e9364736f6c63430008100033",
  "devdoc": {
    "custom:security-contact": "abolaji.adedeji@gmail.com",
    "details": "There are a total of 1,000,000,000 unit of shares.",
    "kind": "dev",
    "methods": {
      "addBeneficiary(address,uint256)": {
        "params": {
          "_holder": "The address of the existing beneficiary",
          "_initialStake": "The amount to initialise the preportion of the stake"
        }
      },
      "getBeneficiariesAddresses()": {
        "returns": {
          "_equityTokens": "An array of equity tokens",
          "_holders": "An array of addresses of the beneficiaries"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getUpdateWindow()": {
        "returns": {
          "_0": "openTimestamp The opening timestamp of the update window",
          "_1": "closeTimestamp The closing timestamp of the update window"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isABeneficiary(address)": {
        "params": {
          "_holder": "The address to check"
        },
        "returns": {
          "_0": "isABeneficiary whether or not the address is a beneficiary"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setCompanyTreasuryAddress(address)": {
        "params": {
          "_fund": "The new address of the Impact 3 fund"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateBeneficiariesStake(address,uint256)": {
        "params": {
          "_holder": "The address of the existing beneficiary",
          "_stakeIncrease": "The amount to increase the equity tokens by"
        }
      },
      "withinUpdateWindow()": {
        "returns": {
          "_0": "isOpen Whether the window to update or add new beneficiaries is open"
        }
      }
    },
    "title": "An Ethereum Token Purse to distribute funds to beneficiaries.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBeneficiary(address,uint256)": {
        "notice": "Adds a new beneficiary with an initial stake"
      },
      "distributeFunds()": {
        "notice": "Distrbute funds to beneficiaries and remainder to Company Treasury"
      },
      "getBeneficiariesAddresses()": {
        "notice": "Gets all beneficiaries of the contract as well as their stake"
      },
      "getUpdateWindow()": {
        "notice": "Calculates the update window intervals"
      },
      "isABeneficiary(address)": {
        "notice": "Checks whether a specific address is a beneficiary of the contract"
      },
      "pause()": {
        "notice": "Pauses the contract so no interactions can be made"
      },
      "setCompanyTreasuryAddress(address)": {
        "notice": "Updates the Company Treasury address"
      },
      "unpause()": {
        "notice": "Unpauses the contract so interactions can be made"
      },
      "updateBeneficiariesStake(address,uint256)": {
        "notice": "Updates an existing beneficiary with a specific stake increase"
      },
      "withinUpdateWindow()": {
        "notice": "Returns whether we are within the update window"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 410,
        "contract": "contracts/StakeManager.sol:StakeManager",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/StakeManager.sol:StakeManager",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 511,
        "contract": "contracts/StakeManager.sol:StakeManager",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1218,
        "contract": "contracts/StakeManager.sol:StakeManager",
        "label": "beneficiariesAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1223,
        "contract": "contracts/StakeManager.sol:StakeManager",
        "label": "beneficiaries",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Stake)1215_storage)"
      },
      {
        "astId": 1225,
        "contract": "contracts/StakeManager.sol:StakeManager",
        "label": "companyTreasuryAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address_payable"
      },
      {
        "astId": 1236,
        "contract": "contracts/StakeManager.sol:StakeManager",
        "label": "lastEndOfIntervalTimestamp",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1239,
        "contract": "contracts/StakeManager.sol:StakeManager",
        "label": "currentTotalStake",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Stake)1215_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakeManager.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)1215_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/StakeManager.sol:StakeManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/StakeManager.sol:StakeManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stake)1215_storage": {
        "encoding": "inplace",
        "label": "struct StakeManager.Stake",
        "members": [
          {
            "astId": 1210,
            "contract": "contracts/StakeManager.sol:StakeManager",
            "label": "equityTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1212,
            "contract": "contracts/StakeManager.sol:StakeManager",
            "label": "fundsLastReceived",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1214,
            "contract": "contracts/StakeManager.sol:StakeManager",
            "label": "equityLastUpdated",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}