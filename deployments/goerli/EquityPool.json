{
  "address": "0x1Acb8E4b7a300A7a8B6f83a7f246E7462F693671",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_i3Fund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_window",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EquityPool__ContractUpdateWindowIsNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EquityPool__ContractUpdateWindowIsOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EquityPool__InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EquityPool__StakeHolderAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EquityPool__StakeHolderDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EquityPool__StakeIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EquityPool__TotalValueGreaterThan100M",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EquityPool__TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeholder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time_distributed",
          "type": "uint256"
        }
      ],
      "name": "FundsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "equityTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeAdded",
          "type": "uint256"
        }
      ],
      "name": "StakeHolderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "equityTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeAdded",
          "type": "uint256"
        }
      ],
      "name": "StakeHolderStakeIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialStake",
          "type": "uint256"
        }
      ],
      "name": "addStakeHolder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeHolders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_holders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_equityTokens",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpdateWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "impact3FundAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "intervalSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        }
      ],
      "name": "isStakeHolder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEndOfIntervalTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fund",
          "type": "address"
        }
      ],
      "name": "setImpact3FundAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeHolderAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakeHolders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "equityTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundsLastReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "equityLastUpdated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeIncrease",
          "type": "uint256"
        }
      ],
      "name": "updateStakeHolder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateWindowSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withinUpdateWindow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9b7579cfe69c97de09358209615c54fb808414b0936912f36b8ee339e6583b66",
  "receipt": {
    "to": null,
    "from": "0x0b9412DF2c8802E7fCc2D000392f16fD0df2bfEE",
    "contractAddress": "0x1Acb8E4b7a300A7a8B6f83a7f246E7462F693671",
    "transactionIndex": 3,
    "gasUsed": "2689027",
    "logsBloom": "0x
    "blockHash": "0x9d28a4a988d9f03dedf5e85fed3b0761424197a093a98a92e3f84f9084d6d774",
    "transactionHash": "0x9b7579cfe69c97de09358209615c54fb808414b0936912f36b8ee339e6583b66",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 7554972,
        "transactionHash": "0x9b7579cfe69c97de09358209615c54fb808414b0936912f36b8ee339e6583b66",
        "address": "0x1Acb8E4b7a300A7a8B6f83a7f246E7462F693671",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000b9412df2c8802e7fcc2d000392f16fd0df2bfee",
          "0x0000000000000000000000000b9412df2c8802e7fcc2d000392f16fd0df2bfee"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x9d28a4a988d9f03dedf5e85fed3b0761424197a093a98a92e3f84f9084d6d774"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 7554972,
        "transactionHash": "0x9b7579cfe69c97de09358209615c54fb808414b0936912f36b8ee339e6583b66",
        "address": "0x1Acb8E4b7a300A7a8B6f83a7f246E7462F693671",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000000b9412df2c8802e7fcc2d000392f16fd0df2bfee",
          "0x0000000000000000000000000b9412df2c8802e7fcc2d000392f16fd0df2bfee"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x9d28a4a988d9f03dedf5e85fed3b0761424197a093a98a92e3f84f9084d6d774"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 7554972,
        "transactionHash": "0x9b7579cfe69c97de09358209615c54fb808414b0936912f36b8ee339e6583b66",
        "address": "0x1Acb8E4b7a300A7a8B6f83a7f246E7462F693671",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
          "0x0000000000000000000000000b9412df2c8802e7fcc2d000392f16fd0df2bfee",
          "0x0000000000000000000000000b9412df2c8802e7fcc2d000392f16fd0df2bfee"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x9d28a4a988d9f03dedf5e85fed3b0761424197a093a98a92e3f84f9084d6d774"
      }
    ],
    "blockNumber": 7554972,
    "cumulativeGasUsed": "2984035",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xda275da0c213afe93d7ddae855de8582ac7cc6c7",
    2592000,
    604800
  ],
  "numDeployments": 2,
  "solcInputHash": "cee6c67d3ef970a70c5124e28a192af7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_i3Fund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_window\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EquityPool__ContractUpdateWindowIsNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EquityPool__ContractUpdateWindowIsOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EquityPool__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EquityPool__StakeHolderAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EquityPool__StakeHolderDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EquityPool__StakeIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EquityPool__TotalValueGreaterThan100M\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EquityPool__TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time_distributed\",\"type\":\"uint256\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"equityTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"}],\"name\":\"StakeHolderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"equityTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"}],\"name\":\"StakeHolderStakeIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialStake\",\"type\":\"uint256\"}],\"name\":\"addStakeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_equityTokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpdateWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impact3FundAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"isStakeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEndOfIntervalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"}],\"name\":\"setImpact3FundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeHolderAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"equityTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundsLastReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"equityLastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIncrease\",\"type\":\"uint256\"}],\"name\":\"updateStakeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateWindowSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withinUpdateWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"custom:security-contact\":\"danu@impact3.io\",\"details\":\"There are total of 100,000,000 Equity Tokens \\\"EQT\\\".\",\"kind\":\"dev\",\"methods\":{\"addStakeHolder(address,uint256)\":{\"params\":{\"_holder\":\"The address of the existing stakeholder\",\"_initialStake\":\"The amount to initialise the preportion of the stake\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getStakeHolders()\":{\"returns\":{\"_equityTokens\":\"An array of equity tokens\",\"_holders\":\"An array of addresses of the stakeholders\"}},\"getUpdateWindow()\":{\"returns\":{\"_0\":\"openTimestamp The opening timestamp of the update window\",\"_1\":\"closeTimestamp The closing timestamp of the update window\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isStakeHolder(address)\":{\"params\":{\"_holder\":\"The address of the stakeholder ot check\"},\"returns\":{\"_0\":\"isStakeHolder whether or not the address is a stakeholder\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setImpact3FundAddress(address)\":{\"params\":{\"fund\":\"The new address of the Impact 3 fund\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateStakeHolder(address,uint256)\":{\"params\":{\"_holder\":\"The address of the existing stakeholder\",\"_stakeIncrease\":\"The amount to increase the equity tokens by\"}},\"withinUpdateWindow()\":{\"returns\":{\"_0\":\"isOpen Whether the window to update or add new stakeholders is open\"}}},\"title\":\"A pool to distribute funds to beneficiaries.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addStakeHolder(address,uint256)\":{\"notice\":\"Adds a new stakeholder with an initial stake\"},\"distributeFunds()\":{\"notice\":\"Distrbute funds to stakeholders and remainder to Impact3 fund\"},\"getStakeHolders()\":{\"notice\":\"Gets all stakeholders of the contract as well as their stake\"},\"getUpdateWindow()\":{\"notice\":\"Calculates the update window intervals\"},\"isStakeHolder(address)\":{\"notice\":\"Checks whether a specific address is a stakeholder of the contract\"},\"pause()\":{\"notice\":\"Pauses the contract so no interactions can be made\"},\"setImpact3FundAddress(address)\":{\"notice\":\"Updates the Impact 3 fund address\"},\"unpause()\":{\"notice\":\"Unpauses the contract so interactions can be made\"},\"updateStakeHolder(address,uint256)\":{\"notice\":\"Updates an existing stakeholder with a specific stake increase\"},\"withinUpdateWindow()\":{\"notice\":\"Returns whether we are within the update window\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EquityPool.sol\":\"EquityPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/EquityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nerror EquityPool__TotalValueGreaterThan100M();\\nerror EquityPool__StakeIsZero();\\nerror EquityPool__TransactionFailed();\\nerror EquityPool__InsufficientBalance();\\nerror EquityPool__ContractUpdateWindowIsOpen();\\nerror EquityPool__ContractUpdateWindowIsNotOpen();\\nerror EquityPool__StakeHolderDoesNotExist();\\nerror EquityPool__StakeHolderAlreadyExists();\\n\\n/// @title A pool to distribute funds to beneficiaries.\\n/// @dev There are total of 100,000,000 Equity Tokens \\\"EQT\\\".\\n/// @custom:security-contact danu@impact3.io\\ncontract EquityPool is Pausable, AccessControl, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    // FundsReceived event is triggered when funds are recieved to the contract\\n    event FundsReceived(address indexed addr, uint256 amount);\\n\\n    // FundsDistributed is triggered when funds are distributed from the contract\\n    event FundsDistributed(\\n        address stakeholder,\\n        uint256 amount,\\n        uint256 time_distributed\\n    );\\n\\n    // StakeHolderAdded is triggered when a new stakeholder is added to the contract\\n    event StakeHolderAdded(\\n        address holder,\\n        uint256 equityTokens,\\n        uint256 timeAdded\\n    );\\n\\n    // StakeHolderStakeIncreased is triggered when an existing stakeholder equity is increased\\n    event StakeHolderStakeIncreased(\\n        address holder,\\n        uint256 equityTokens,\\n        uint256 timeAdded\\n    );\\n\\n    // Roles\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    // Equity Stake struct encapsulates an equity stake for a specific stakeholder\\n    struct Stake {\\n        uint256 equityTokens;\\n        uint256 fundsLastReceived;\\n        uint256 equityLastUpdated;\\n    }\\n\\n    // list of addresses that are stakeholders\\n    address[] public stakeHolderAddresses;\\n\\n    // stakeHolder is a mapping from address to Stake of current stake holders\\n    mapping(address => Stake) public stakeHolders;\\n\\n    // the address of the impact3 treasury fund\\n    address payable public impact3FundAddress;\\n\\n    // intervalSeconds is the number of seconds of the update windows ie 30 days\\n    uint256 public immutable intervalSeconds;\\n    // updateWindowSeconds is number of seconds the interval of each update ie 7 days\\n    uint256 public immutable updateWindowSeconds;\\n\\n    // lastEndOfWindowTimestamp is the last time stamp of when the interval ended in seconds\\n    uint256 public lastEndOfIntervalTimestamp;\\n\\n    constructor(\\n        address _i3Fund,\\n        uint256 _interval,\\n        uint256 _window\\n    ) {\\n        // grant roles to deployer address\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n        _grantRole(MANAGER_ROLE, msg.sender);\\n\\n        // set the i3Fund address\\n        setImpact3FundAddress(_i3Fund);\\n\\n        // set the interval and window and current end of interval timestamp\\n        intervalSeconds = _interval;\\n        updateWindowSeconds = _window;\\n        lastEndOfIntervalTimestamp = block.timestamp;\\n    }\\n\\n    /// @notice Distrbute funds to stakeholders and remainder to Impact3 fund\\n    function distributeFunds() public whenNotPaused nonReentrant {\\n        if (withinUpdateWindow()) {\\n            revert EquityPool__ContractUpdateWindowIsOpen();\\n        }\\n\\n        uint256 fundsToDistribute = address(this).balance;\\n        uint256 fundsDistributed = 0;\\n\\n        address[] memory currentHolderAddresses = stakeHolderAddresses;\\n        for (uint256 i = 0; i < currentHolderAddresses.length; i++) {\\n            // calculate amount to distribute\\n            uint256 equityTokens = stakeHolders[currentHolderAddresses[i]]\\n                .equityTokens;\\n            uint256 amount = fundsToDistribute.mul(equityTokens).div((10**8));\\n\\n            // update funds last received with timestamp\\n            stakeHolders[currentHolderAddresses[i]].fundsLastReceived = block\\n                .timestamp;\\n            fundsDistributed += amount;\\n\\n            // send value to stake holder\\n            sendValue(payable(stakeHolderAddresses[i]), amount);\\n            emit FundsDistributed(\\n                stakeHolderAddresses[i],\\n                amount,\\n                block.timestamp\\n            );\\n        }\\n\\n        // update last timestamp with previous timestamp plus interval\\n        (, uint256 _closetimestamp) = getUpdateWindow();\\n        if (block.timestamp >= _closetimestamp) {\\n            lastEndOfIntervalTimestamp += intervalSeconds;\\n        } else {\\n            lastEndOfIntervalTimestamp = lastEndOfIntervalTimestamp;\\n        }\\n\\n        // send remaining funds to impact 3 fund address\\n        sendValue(impact3FundAddress, address(this).balance);\\n        emit FundsDistributed(\\n            impact3FundAddress,\\n            fundsDistributed,\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @notice Updates an existing stakeholder with a specific stake increase\\n    /// @param _holder The address of the existing stakeholder\\n    /// @param _stakeIncrease The amount to increase the equity tokens by\\n    function updateStakeHolder(address _holder, uint256 _stakeIncrease)\\n        public\\n        whenNotPaused\\n        onlyRole(MANAGER_ROLE)\\n    {\\n        // only continue if the update window is open\\n        if (!withinUpdateWindow()) {\\n            revert EquityPool__ContractUpdateWindowIsNotOpen();\\n        }\\n\\n        // check if the stake is zero\\n        if (_stakeIncrease <= 0) {\\n            revert EquityPool__StakeIsZero();\\n        }\\n\\n        // check if the new total stake is greater than 100m\\n        uint256 newTotalStake = totalStake(stakeHolderAddresses).add(\\n            _stakeIncrease\\n        );\\n        if (newTotalStake > (10**8)) {\\n            revert EquityPool__TotalValueGreaterThan100M();\\n        }\\n\\n        // check if stake holder exists\\n        if (stakeHolders[_holder].equityTokens <= 0) {\\n            revert EquityPool__StakeHolderDoesNotExist();\\n        }\\n\\n        // Updating equities of existing stakeholders\\n        uint256 newStake = stakeHolders[_holder].equityTokens.add(\\n            _stakeIncrease\\n        );\\n        stakeHolders[_holder].equityTokens = newStake;\\n        stakeHolders[_holder].equityLastUpdated = block.timestamp;\\n\\n        // emit stake holder stake increased event\\n        emit StakeHolderStakeIncreased(\\n            _holder,\\n            _stakeIncrease,\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @notice Adds a new stakeholder with an initial stake\\n    /// @param _holder The address of the existing stakeholder\\n    /// @param _initialStake The amount to initialise the preportion of the stake\\n    function addStakeHolder(address _holder, uint256 _initialStake)\\n        public\\n        whenNotPaused\\n        onlyRole(MANAGER_ROLE)\\n    {\\n        // only continue if the update window is open\\n        if (!withinUpdateWindow()) {\\n            revert EquityPool__ContractUpdateWindowIsNotOpen();\\n        }\\n\\n        // check if the stake is zero\\n        if (_initialStake <= 0) {\\n            revert EquityPool__StakeIsZero();\\n        }\\n\\n        // check if the new total stake is greater than 100m\\n        uint256 newTotalStake = totalStake(stakeHolderAddresses).add(\\n            _initialStake\\n        );\\n        if (newTotalStake > (10**8)) {\\n            revert EquityPool__TotalValueGreaterThan100M();\\n        }\\n\\n        // check if stake holder already exists\\n        if (stakeHolders[_holder].equityTokens != 0) {\\n            revert EquityPool__StakeHolderAlreadyExists();\\n        }\\n\\n        // add stake holder to mapping\\n        stakeHolders[_holder] = Stake(\\n            _initialStake,\\n            block.timestamp,\\n            block.timestamp\\n        );\\n        stakeHolderAddresses.push(_holder);\\n\\n        // emit stake holder added map\\n        emit StakeHolderAdded(_holder, _initialStake, block.timestamp);\\n    }\\n\\n    /// @notice Updates the Impact 3 fund address\\n    /// @param fund The new address of the Impact 3 fund\\n    function setImpact3FundAddress(address fund) public onlyRole(MANAGER_ROLE) {\\n        impact3FundAddress = payable(fund);\\n    }\\n\\n    /// @notice Calculates the total stake preportions of all stakeholders\\n    /// @param _currentHolders The addresses of the current stake holders\\n    function totalStake(address[] memory _currentHolders)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _totalStake = 0;\\n        for (uint256 i = 0; i < _currentHolders.length; i++) {\\n            _totalStake += stakeHolders[_currentHolders[i]].equityTokens;\\n        }\\n        return _totalStake;\\n    }\\n\\n    /// @notice Returns whether we are within the update window\\n    /// @return isOpen Whether the window to update or add new stakeholders is open\\n    function withinUpdateWindow() public view returns (bool) {\\n        (uint256 _opentimestamp, uint256 _closetimestamp) = getUpdateWindow();\\n\\n        if (\\n            block.timestamp >= _opentimestamp &&\\n            block.timestamp < _closetimestamp\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Calculates the update window intervals\\n    /// @return openTimestamp The opening timestamp of the update window\\n    /// @return closeTimestamp The closing timestamp of the update window\\n    function getUpdateWindow() public view returns (uint256, uint256) {\\n        uint256 _opentimestamp = lastEndOfIntervalTimestamp + intervalSeconds;\\n        uint256 _closetimestamp = lastEndOfIntervalTimestamp +\\n            (intervalSeconds + updateWindowSeconds);\\n        return (_opentimestamp, _closetimestamp);\\n    }\\n\\n    /// @notice Pauses the contract so no interactions can be made\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the contract so interactions can be made\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @notice When funds are received by the contract we emit an event\\n    receive() external payable {\\n        emit FundsReceived(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Sends an address funds from this contract\\n    /// @param recipient The address to send funds to\\n    /// @param amount The amount of funds to send\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert EquityPool__InsufficientBalance();\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert EquityPool__TransactionFailed();\\n        }\\n    }\\n\\n    /// @notice Gets all stakeholders of the contract as well as their stake\\n    /// @return _holders An array of addresses of the stakeholders\\n    /// @return _equityTokens An array of equity tokens\\n    function getStakeHolders()\\n        external\\n        view\\n        returns (address[] memory _holders, uint256[] memory _equityTokens)\\n    {\\n        _holders = new address[](stakeHolderAddresses.length);\\n        _holders = stakeHolderAddresses;\\n\\n        _equityTokens = new uint256[](_holders.length);\\n        for (uint256 i = 0; i < _holders.length; i++) {\\n            _equityTokens[i] = stakeHolders[_holders[i]].equityTokens;\\n        }\\n\\n        return (_holders, _equityTokens);\\n    }\\n\\n    /// @notice Checks whether a specific address is a stakeholder of the contract\\n    /// @param _holder The address of the stakeholder ot check\\n    /// @return isStakeHolder whether or not the address is a stakeholder\\n    function isStakeHolder(address _holder) external view returns (bool) {\\n        if (stakeHolders[_holder].equityTokens <= 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x5dd74c57a01177d2434df7dcfc097b4bb01d334f1ac428f291ff098d8ab4423e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620037cd380380620037cd8339818101604052810190620000379190620006c6565b60008060006101000a81548160ff02191690831515021790555060016002819055506200006e6000801b336200010360201b60201c565b620000a07f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336200010360201b60201c565b620000d27f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08336200010360201b60201c565b620000e383620001f460201b60201c565b81608081815250508060a081815250504260068190555050505062000afa565b6200011582826200026b60201b60201c565b620001f057600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000195620002d660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086200022681620002de60201b60201c565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b620002ff81620002f3620002d660201b60201c565b6200030260201b60201c565b50565b6200031482826200026b60201b60201c565b620003c257620003478173ffffffffffffffffffffffffffffffffffffffff166014620003c660201b620017991760201c565b620003628360001c6020620003c660201b620017991760201c565b6040516020016200037592919062000845565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003b99190620008ea565b60405180910390fd5b5050565b606060006002836002620003db91906200093d565b620003e791906200099e565b67ffffffffffffffff811115620004035762000402620009fb565b5b6040519080825280601f01601f191660200182016040528015620004365781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811062000471576200047062000a2a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110620004d857620004d762000a2a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026200051a91906200093d565b6200052691906200099e565b90505b6001811115620005d0577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106200056c576200056b62000a2a565b5b1a60f81b82828151811062000586576200058562000a2a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080620005c89062000a59565b905062000529565b506000841462000617576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200060e9062000ad8565b60405180910390fd5b8091505092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620006538262000626565b9050919050565b620006658162000646565b81146200067157600080fd5b50565b60008151905062000685816200065a565b92915050565b6000819050919050565b620006a0816200068b565b8114620006ac57600080fd5b50565b600081519050620006c08162000695565b92915050565b600080600060608486031215620006e257620006e162000621565b5b6000620006f28682870162000674565b93505060206200070586828701620006af565b92505060406200071886828701620006af565b9150509250925092565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006200076560178362000722565b915062000772826200072d565b601782019050919050565b600081519050919050565b60005b83811015620007a85780820151818401526020810190506200078b565b83811115620007b8576000848401525b50505050565b6000620007cb826200077d565b620007d7818562000722565b9350620007e981856020860162000788565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006200082d60118362000722565b91506200083a82620007f5565b601182019050919050565b6000620008528262000756565b9150620008608285620007be565b91506200086d826200081e565b91506200087b8284620007be565b91508190509392505050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b6000620008b6826200077d565b620008c2818562000887565b9350620008d481856020860162000788565b620008df8162000898565b840191505092915050565b60006020820190508181036000830152620009068184620008a9565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200094a826200068b565b915062000957836200068b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200099357620009926200090e565b5b828202905092915050565b6000620009ab826200068b565b9150620009b8836200068b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620009f057620009ef6200090e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600062000a66826200068b565b9150600082141562000a7d5762000a7c6200090e565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600062000ac060208362000887565b915062000acd8262000a88565b602082019050919050565b6000602082019050818103600083015262000af38162000ab1565b9050919050565b60805160a051612c9162000b3c60003960008181610c340152610e53015260008181610abd01528181610c0201528181610c550152610d0f0152612c916000f3fe6080604052600436106101855760003560e01c806391d14854116100d1578063e26ff10a1161008a578063e63ab1e911610064578063e63ab1e9146105ba578063ec87621c146105e5578063f7fecc2714610610578063fabf0b0b1461063c576101da565b8063e26ff10a14610529578063e2adb09814610568578063e499e2e514610591576101da565b806391d1485414610405578063a010fd7014610442578063a128f3551461047f578063a217fddf146104aa578063c8f29b04146104d5578063d547741f14610500576101da565b80633c915af71161013e5780635c975abb116101185780635c975abb1461035b57806363512159146103865780637d1cd04f146103c35780638456cb59146103ee576101da565b80633c915af7146102ed5780633f4ba83a14610318578063408a35501461032f576101da565b806301ffc9a7146101df578063248a9ca31461021c5780632f2ff15d1461025957806336568abe146102825780633a6a4d2e146102ab5780633be68630146102c2576101da565b366101da573373ffffffffffffffffffffffffffffffffffffffff167f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f346040516101d09190611fe8565b60405180910390a2005b600080fd5b3480156101eb57600080fd5b5061020660048036038101906102019190612060565b610665565b60405161021391906120a8565b60405180910390f35b34801561022857600080fd5b50610243600480360381019061023e91906120f9565b6106df565b6040516102509190612135565b60405180910390f35b34801561026557600080fd5b50610280600480360381019061027b91906121ae565b6106ff565b005b34801561028e57600080fd5b506102a960048036038101906102a491906121ae565b610720565b005b3480156102b757600080fd5b506102c06107a3565b005b3480156102ce57600080fd5b506102d7610b9a565b6040516102e4919061220f565b60405180910390f35b3480156102f957600080fd5b50610302610bc0565b60405161030f9190611fe8565b60405180910390f35b34801561032457600080fd5b5061032d610bc6565b005b34801561033b57600080fd5b50610344610bfb565b60405161035292919061222a565b60405180910390f35b34801561036757600080fd5b50610370610c99565b60405161037d91906120a8565b60405180910390f35b34801561039257600080fd5b506103ad60048036038101906103a89190612253565b610caf565b6040516103ba91906120a8565b60405180910390f35b3480156103cf57600080fd5b506103d8610d0d565b6040516103e59190611fe8565b60405180910390f35b3480156103fa57600080fd5b50610403610d31565b005b34801561041157600080fd5b5061042c600480360381019061042791906121ae565b610d66565b60405161043991906120a8565b60405180910390f35b34801561044e57600080fd5b50610469600480360381019061046491906122ac565b610dd1565b60405161047691906122e8565b60405180910390f35b34801561048b57600080fd5b50610494610e10565b6040516104a191906120a8565b60405180910390f35b3480156104b657600080fd5b506104bf610e4a565b6040516104cc9190612135565b60405180910390f35b3480156104e157600080fd5b506104ea610e51565b6040516104f79190611fe8565b60405180910390f35b34801561050c57600080fd5b50610527600480360381019061052291906121ae565b610e75565b005b34801561053557600080fd5b50610550600480360381019061054b9190612253565b610e96565b60405161055f93929190612303565b60405180910390f35b34801561057457600080fd5b5061058f600480360381019061058a9190612253565b610ec0565b005b34801561059d57600080fd5b506105b860048036038101906105b3919061233a565b610f2f565b005b3480156105c657600080fd5b506105cf611257565b6040516105dc9190612135565b60405180910390f35b3480156105f157600080fd5b506105fa61127b565b6040516106079190612135565b60405180910390f35b34801561061c57600080fd5b5061062561129f565b6040516106339291906124f6565b60405180910390f35b34801561064857600080fd5b50610663600480360381019061065e919061233a565b611467565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106d857506106d7826119d5565b5b9050919050565b600060016000838152602001908152602001600020600101549050919050565b610708826106df565b61071181611a3f565b61071b8383611a53565b505050565b610728611b33565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078c906125b0565b60405180910390fd5b61079f8282611b3b565b5050565b6107ab611c1d565b6002805414156107f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e79061261c565b60405180910390fd5b600280819055506107ff610e10565b15610836576040517fe894809900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600047905060008060038054806020026020016040519081016040528092919081815260200182805480156108c057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610876575b5050505050905060005b8151811015610aa6576000600460008484815181106108ec576108eb61263c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050600061095f6305f5e1006109518489611c6790919063ffffffff16565b611c7d90919063ffffffff16565b905042600460008686815181106109795761097861263c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555080856109ce919061269a565b9450610a18600384815481106109e7576109e661263c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682611c93565b7f080babe757d4e5c7db3b7bd10606a7bf07a9857f660977ada6ca7a4d329376c860038481548110610a4d57610a4c61263c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168242604051610a89939291906126f0565b60405180910390a150508080610a9e90612727565b9150506108ca565b506000610ab1610bfb565b915050804210610af9577f000000000000000000000000000000000000000000000000000000000000000060066000828254610aed919061269a565b92505081905550610b03565b6006546006819055505b610b2f600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1647611c93565b7f080babe757d4e5c7db3b7bd10606a7bf07a9857f660977ada6ca7a4d329376c8600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168442604051610b84939291906127cf565b60405180910390a1505050506001600281905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610bf081611a3f565b610bf8611d75565b50565b60008060007f0000000000000000000000000000000000000000000000000000000000000000600654610c2e919061269a565b905060007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c7e919061269a565b600654610c8b919061269a565b905081819350935050509091565b60008060009054906101000a900460ff16905090565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411610d035760009050610d08565b600190505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610d5b81611a3f565b610d63611dd7565b50565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60038181548110610de157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000610e1d610bfb565b91509150814210158015610e3057508042105b15610e4057600192505050610e47565b6000925050505b90565b6000801b81565b7f000000000000000000000000000000000000000000000000000000000000000081565b610e7e826106df565b610e8781611a3f565b610e918383611b3b565b505050565b60046020528060005260406000206000915090508060000154908060010154908060020154905083565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08610eea81611a3f565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610f37611c1d565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08610f6181611a3f565b610f69610e10565b610f9f576040517fa3fd628600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008211610fd9576040517f7750d6bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061107c8361106e600380548060200260200160405190810160405280929190818152602001828054801561106457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161101a575b5050505050611e39565b611ed390919063ffffffff16565b90506305f5e1008111156110bc576040517ffe278a0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414611138576040517fdd484d6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806060016040528084815260200142815260200142815250600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506003849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f984350119ecf7f58ff768fba0125b1ea5f84b5c79130116ac67e295294feec7c848442604051611249939291906126f0565b60405180910390a150505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b60608060038054905067ffffffffffffffff8111156112c1576112c0612806565b5b6040519080825280602002602001820160405280156112ef5781602001602082028036833780820191505090505b509150600380548060200260200160405190810160405280929190818152602001828054801561137457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161132a575b50505050509150815167ffffffffffffffff81111561139657611395612806565b5b6040519080825280602002602001820160405280156113c45781602001602082028036833780820191505090505b50905060005b825181101561146257600460008483815181106113ea576113e961263c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548282815181106114435761144261263c565b5b602002602001018181525050808061145a90612727565b9150506113ca565b509091565b61146f611c1d565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861149981611a3f565b6114a1610e10565b6114d7576040517fa3fd628600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008211611511576040517f7750d6bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006115b4836115a6600380548060200260200160405190810160405280929190818152602001828054801561159c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611552575b5050505050611e39565b611ed390919063ffffffff16565b90506305f5e1008111156115f4576040517ffe278a0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411611670576040517f658056f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006116c784600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611ed390919063ffffffff16565b905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055507fb1c069c2b2a0fbf8648b344b6d632ee6503befa49d2719a79c9dee2a47ab63c885854260405161178a939291906126f0565b60405180910390a15050505050565b6060600060028360026117ac9190612835565b6117b6919061269a565b67ffffffffffffffff8111156117cf576117ce612806565b5b6040519080825280601f01601f1916602001820160405280156118015781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106118395761183861263c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061189d5761189c61263c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026118dd9190612835565b6118e7919061269a565b90505b6001811115611987577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106119295761192861263c565b5b1a60f81b8282815181106119405761193f61263c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806119809061288f565b90506118ea565b50600084146119cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c290612905565b60405180910390fd5b8091505092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611a5081611a4b611b33565b611ee9565b50565b611a5d8282610d66565b611b2f57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611ad4611b33565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b611b458282610d66565b15611c195760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611bbe611b33565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611c25610c99565b15611c65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5c90612971565b60405180910390fd5b565b60008183611c759190612835565b905092915050565b60008183611c8b91906129c0565b905092915050565b80471015611ccd576040517fa076cfdc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051611cf390612a22565b60006040518083038185875af1925050503d8060008114611d30576040519150601f19603f3d011682016040523d82523d6000602084013e611d35565b606091505b5050905080611d70576040517fcc7b392100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b611d7d611f86565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611dc0611b33565b604051611dcd91906122e8565b60405180910390a1565b611ddf611c1d565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e22611b33565b604051611e2f91906122e8565b60405180910390a1565b6000806000905060005b8351811015611ec95760046000858381518110611e6357611e6261263c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015482611eb4919061269a565b91508080611ec190612727565b915050611e43565b5080915050919050565b60008183611ee1919061269a565b905092915050565b611ef38282610d66565b611f8257611f188173ffffffffffffffffffffffffffffffffffffffff166014611799565b611f268360001c6020611799565b604051602001611f37929190612b49565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f799190612bcd565b60405180910390fd5b5050565b611f8e610c99565b611fcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc490612c3b565b60405180910390fd5b565b6000819050919050565b611fe281611fcf565b82525050565b6000602082019050611ffd6000830184611fd9565b92915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61203d81612008565b811461204857600080fd5b50565b60008135905061205a81612034565b92915050565b60006020828403121561207657612075612003565b5b60006120848482850161204b565b91505092915050565b60008115159050919050565b6120a28161208d565b82525050565b60006020820190506120bd6000830184612099565b92915050565b6000819050919050565b6120d6816120c3565b81146120e157600080fd5b50565b6000813590506120f3816120cd565b92915050565b60006020828403121561210f5761210e612003565b5b600061211d848285016120e4565b91505092915050565b61212f816120c3565b82525050565b600060208201905061214a6000830184612126565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061217b82612150565b9050919050565b61218b81612170565b811461219657600080fd5b50565b6000813590506121a881612182565b92915050565b600080604083850312156121c5576121c4612003565b5b60006121d3858286016120e4565b92505060206121e485828601612199565b9150509250929050565b60006121f982612150565b9050919050565b612209816121ee565b82525050565b60006020820190506122246000830184612200565b92915050565b600060408201905061223f6000830185611fd9565b61224c6020830184611fd9565b9392505050565b60006020828403121561226957612268612003565b5b600061227784828501612199565b91505092915050565b61228981611fcf565b811461229457600080fd5b50565b6000813590506122a681612280565b92915050565b6000602082840312156122c2576122c1612003565b5b60006122d084828501612297565b91505092915050565b6122e281612170565b82525050565b60006020820190506122fd60008301846122d9565b92915050565b60006060820190506123186000830186611fd9565b6123256020830185611fd9565b6123326040830184611fd9565b949350505050565b6000806040838503121561235157612350612003565b5b600061235f85828601612199565b925050602061237085828601612297565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123af81612170565b82525050565b60006123c183836123a6565b60208301905092915050565b6000602082019050919050565b60006123e58261237a565b6123ef8185612385565b93506123fa83612396565b8060005b8381101561242b57815161241288826123b5565b975061241d836123cd565b9250506001810190506123fe565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61246d81611fcf565b82525050565b600061247f8383612464565b60208301905092915050565b6000602082019050919050565b60006124a382612438565b6124ad8185612443565b93506124b883612454565b8060005b838110156124e95781516124d08882612473565b97506124db8361248b565b9250506001810190506124bc565b5085935050505092915050565b6000604082019050818103600083015261251081856123da565b905081810360208301526125248184612498565b90509392505050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061259a602f8361252d565b91506125a58261253e565b604082019050919050565b600060208201905081810360008301526125c98161258d565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612606601f8361252d565b9150612611826125d0565b602082019050919050565b60006020820190508181036000830152612635816125f9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126a582611fcf565b91506126b083611fcf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126e5576126e461266b565b5b828201905092915050565b600060608201905061270560008301866122d9565b6127126020830185611fd9565b61271f6040830184611fd9565b949350505050565b600061273282611fcf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127655761276461266b565b5b600182019050919050565b6000819050919050565b600061279561279061278b84612150565b612770565b612150565b9050919050565b60006127a78261277a565b9050919050565b60006127b98261279c565b9050919050565b6127c9816127ae565b82525050565b60006060820190506127e460008301866127c0565b6127f16020830185611fd9565b6127fe6040830184611fd9565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061284082611fcf565b915061284b83611fcf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156128845761288361266b565b5b828202905092915050565b600061289a82611fcf565b915060008214156128ae576128ad61266b565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006128ef60208361252d565b91506128fa826128b9565b602082019050919050565b6000602082019050818103600083015261291e816128e2565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061295b60108361252d565b915061296682612925565b602082019050919050565b6000602082019050818103600083015261298a8161294e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006129cb82611fcf565b91506129d683611fcf565b9250826129e6576129e5612991565b5b828204905092915050565b600081905092915050565b50565b6000612a0c6000836129f1565b9150612a17826129fc565b600082019050919050565b6000612a2d826129ff565b9150819050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612a78601783612a37565b9150612a8382612a42565b601782019050919050565b600081519050919050565b60005b83811015612ab7578082015181840152602081019050612a9c565b83811115612ac6576000848401525b50505050565b6000612ad782612a8e565b612ae18185612a37565b9350612af1818560208601612a99565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612b33601183612a37565b9150612b3e82612afd565b601182019050919050565b6000612b5482612a6b565b9150612b608285612acc565b9150612b6b82612b26565b9150612b778284612acc565b91508190509392505050565b6000601f19601f8301169050919050565b6000612b9f82612a8e565b612ba9818561252d565b9350612bb9818560208601612a99565b612bc281612b83565b840191505092915050565b60006020820190508181036000830152612be78184612b94565b905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612c2560148361252d565b9150612c3082612bef565b602082019050919050565b60006020820190508181036000830152612c5481612c18565b905091905056fea2646970667358221220bea7b7d4a150e957e25043564d94e7345521d8ff2de1e9b99c6cf68daa22d29264736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101855760003560e01c806391d14854116100d1578063e26ff10a1161008a578063e63ab1e911610064578063e63ab1e9146105ba578063ec87621c146105e5578063f7fecc2714610610578063fabf0b0b1461063c576101da565b8063e26ff10a14610529578063e2adb09814610568578063e499e2e514610591576101da565b806391d1485414610405578063a010fd7014610442578063a128f3551461047f578063a217fddf146104aa578063c8f29b04146104d5578063d547741f14610500576101da565b80633c915af71161013e5780635c975abb116101185780635c975abb1461035b57806363512159146103865780637d1cd04f146103c35780638456cb59146103ee576101da565b80633c915af7146102ed5780633f4ba83a14610318578063408a35501461032f576101da565b806301ffc9a7146101df578063248a9ca31461021c5780632f2ff15d1461025957806336568abe146102825780633a6a4d2e146102ab5780633be68630146102c2576101da565b366101da573373ffffffffffffffffffffffffffffffffffffffff167f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f346040516101d09190611fe8565b60405180910390a2005b600080fd5b3480156101eb57600080fd5b5061020660048036038101906102019190612060565b610665565b60405161021391906120a8565b60405180910390f35b34801561022857600080fd5b50610243600480360381019061023e91906120f9565b6106df565b6040516102509190612135565b60405180910390f35b34801561026557600080fd5b50610280600480360381019061027b91906121ae565b6106ff565b005b34801561028e57600080fd5b506102a960048036038101906102a491906121ae565b610720565b005b3480156102b757600080fd5b506102c06107a3565b005b3480156102ce57600080fd5b506102d7610b9a565b6040516102e4919061220f565b60405180910390f35b3480156102f957600080fd5b50610302610bc0565b60405161030f9190611fe8565b60405180910390f35b34801561032457600080fd5b5061032d610bc6565b005b34801561033b57600080fd5b50610344610bfb565b60405161035292919061222a565b60405180910390f35b34801561036757600080fd5b50610370610c99565b60405161037d91906120a8565b60405180910390f35b34801561039257600080fd5b506103ad60048036038101906103a89190612253565b610caf565b6040516103ba91906120a8565b60405180910390f35b3480156103cf57600080fd5b506103d8610d0d565b6040516103e59190611fe8565b60405180910390f35b3480156103fa57600080fd5b50610403610d31565b005b34801561041157600080fd5b5061042c600480360381019061042791906121ae565b610d66565b60405161043991906120a8565b60405180910390f35b34801561044e57600080fd5b50610469600480360381019061046491906122ac565b610dd1565b60405161047691906122e8565b60405180910390f35b34801561048b57600080fd5b50610494610e10565b6040516104a191906120a8565b60405180910390f35b3480156104b657600080fd5b506104bf610e4a565b6040516104cc9190612135565b60405180910390f35b3480156104e157600080fd5b506104ea610e51565b6040516104f79190611fe8565b60405180910390f35b34801561050c57600080fd5b50610527600480360381019061052291906121ae565b610e75565b005b34801561053557600080fd5b50610550600480360381019061054b9190612253565b610e96565b60405161055f93929190612303565b60405180910390f35b34801561057457600080fd5b5061058f600480360381019061058a9190612253565b610ec0565b005b34801561059d57600080fd5b506105b860048036038101906105b3919061233a565b610f2f565b005b3480156105c657600080fd5b506105cf611257565b6040516105dc9190612135565b60405180910390f35b3480156105f157600080fd5b506105fa61127b565b6040516106079190612135565b60405180910390f35b34801561061c57600080fd5b5061062561129f565b6040516106339291906124f6565b60405180910390f35b34801561064857600080fd5b50610663600480360381019061065e919061233a565b611467565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106d857506106d7826119d5565b5b9050919050565b600060016000838152602001908152602001600020600101549050919050565b610708826106df565b61071181611a3f565b61071b8383611a53565b505050565b610728611b33565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078c906125b0565b60405180910390fd5b61079f8282611b3b565b5050565b6107ab611c1d565b6002805414156107f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e79061261c565b60405180910390fd5b600280819055506107ff610e10565b15610836576040517fe894809900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600047905060008060038054806020026020016040519081016040528092919081815260200182805480156108c057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610876575b5050505050905060005b8151811015610aa6576000600460008484815181106108ec576108eb61263c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050600061095f6305f5e1006109518489611c6790919063ffffffff16565b611c7d90919063ffffffff16565b905042600460008686815181106109795761097861263c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555080856109ce919061269a565b9450610a18600384815481106109e7576109e661263c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682611c93565b7f080babe757d4e5c7db3b7bd10606a7bf07a9857f660977ada6ca7a4d329376c860038481548110610a4d57610a4c61263c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168242604051610a89939291906126f0565b60405180910390a150508080610a9e90612727565b9150506108ca565b506000610ab1610bfb565b915050804210610af9577f000000000000000000000000000000000000000000000000000000000000000060066000828254610aed919061269a565b92505081905550610b03565b6006546006819055505b610b2f600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1647611c93565b7f080babe757d4e5c7db3b7bd10606a7bf07a9857f660977ada6ca7a4d329376c8600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168442604051610b84939291906127cf565b60405180910390a1505050506001600281905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610bf081611a3f565b610bf8611d75565b50565b60008060007f0000000000000000000000000000000000000000000000000000000000000000600654610c2e919061269a565b905060007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c7e919061269a565b600654610c8b919061269a565b905081819350935050509091565b60008060009054906101000a900460ff16905090565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411610d035760009050610d08565b600190505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610d5b81611a3f565b610d63611dd7565b50565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60038181548110610de157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000610e1d610bfb565b91509150814210158015610e3057508042105b15610e4057600192505050610e47565b6000925050505b90565b6000801b81565b7f000000000000000000000000000000000000000000000000000000000000000081565b610e7e826106df565b610e8781611a3f565b610e918383611b3b565b505050565b60046020528060005260406000206000915090508060000154908060010154908060020154905083565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08610eea81611a3f565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610f37611c1d565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08610f6181611a3f565b610f69610e10565b610f9f576040517fa3fd628600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008211610fd9576040517f7750d6bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061107c8361106e600380548060200260200160405190810160405280929190818152602001828054801561106457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161101a575b5050505050611e39565b611ed390919063ffffffff16565b90506305f5e1008111156110bc576040517ffe278a0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414611138576040517fdd484d6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806060016040528084815260200142815260200142815250600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506003849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f984350119ecf7f58ff768fba0125b1ea5f84b5c79130116ac67e295294feec7c848442604051611249939291906126f0565b60405180910390a150505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b60608060038054905067ffffffffffffffff8111156112c1576112c0612806565b5b6040519080825280602002602001820160405280156112ef5781602001602082028036833780820191505090505b509150600380548060200260200160405190810160405280929190818152602001828054801561137457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161132a575b50505050509150815167ffffffffffffffff81111561139657611395612806565b5b6040519080825280602002602001820160405280156113c45781602001602082028036833780820191505090505b50905060005b825181101561146257600460008483815181106113ea576113e961263c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548282815181106114435761144261263c565b5b602002602001018181525050808061145a90612727565b9150506113ca565b509091565b61146f611c1d565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861149981611a3f565b6114a1610e10565b6114d7576040517fa3fd628600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008211611511576040517f7750d6bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006115b4836115a6600380548060200260200160405190810160405280929190818152602001828054801561159c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611552575b5050505050611e39565b611ed390919063ffffffff16565b90506305f5e1008111156115f4576040517ffe278a0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411611670576040517f658056f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006116c784600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611ed390919063ffffffff16565b905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055507fb1c069c2b2a0fbf8648b344b6d632ee6503befa49d2719a79c9dee2a47ab63c885854260405161178a939291906126f0565b60405180910390a15050505050565b6060600060028360026117ac9190612835565b6117b6919061269a565b67ffffffffffffffff8111156117cf576117ce612806565b5b6040519080825280601f01601f1916602001820160405280156118015781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106118395761183861263c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061189d5761189c61263c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026118dd9190612835565b6118e7919061269a565b90505b6001811115611987577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106119295761192861263c565b5b1a60f81b8282815181106119405761193f61263c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806119809061288f565b90506118ea565b50600084146119cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c290612905565b60405180910390fd5b8091505092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611a5081611a4b611b33565b611ee9565b50565b611a5d8282610d66565b611b2f57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611ad4611b33565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b611b458282610d66565b15611c195760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611bbe611b33565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611c25610c99565b15611c65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5c90612971565b60405180910390fd5b565b60008183611c759190612835565b905092915050565b60008183611c8b91906129c0565b905092915050565b80471015611ccd576040517fa076cfdc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051611cf390612a22565b60006040518083038185875af1925050503d8060008114611d30576040519150601f19603f3d011682016040523d82523d6000602084013e611d35565b606091505b5050905080611d70576040517fcc7b392100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b611d7d611f86565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611dc0611b33565b604051611dcd91906122e8565b60405180910390a1565b611ddf611c1d565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e22611b33565b604051611e2f91906122e8565b60405180910390a1565b6000806000905060005b8351811015611ec95760046000858381518110611e6357611e6261263c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015482611eb4919061269a565b91508080611ec190612727565b915050611e43565b5080915050919050565b60008183611ee1919061269a565b905092915050565b611ef38282610d66565b611f8257611f188173ffffffffffffffffffffffffffffffffffffffff166014611799565b611f268360001c6020611799565b604051602001611f37929190612b49565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f799190612bcd565b60405180910390fd5b5050565b611f8e610c99565b611fcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc490612c3b565b60405180910390fd5b565b6000819050919050565b611fe281611fcf565b82525050565b6000602082019050611ffd6000830184611fd9565b92915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61203d81612008565b811461204857600080fd5b50565b60008135905061205a81612034565b92915050565b60006020828403121561207657612075612003565b5b60006120848482850161204b565b91505092915050565b60008115159050919050565b6120a28161208d565b82525050565b60006020820190506120bd6000830184612099565b92915050565b6000819050919050565b6120d6816120c3565b81146120e157600080fd5b50565b6000813590506120f3816120cd565b92915050565b60006020828403121561210f5761210e612003565b5b600061211d848285016120e4565b91505092915050565b61212f816120c3565b82525050565b600060208201905061214a6000830184612126565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061217b82612150565b9050919050565b61218b81612170565b811461219657600080fd5b50565b6000813590506121a881612182565b92915050565b600080604083850312156121c5576121c4612003565b5b60006121d3858286016120e4565b92505060206121e485828601612199565b9150509250929050565b60006121f982612150565b9050919050565b612209816121ee565b82525050565b60006020820190506122246000830184612200565b92915050565b600060408201905061223f6000830185611fd9565b61224c6020830184611fd9565b9392505050565b60006020828403121561226957612268612003565b5b600061227784828501612199565b91505092915050565b61228981611fcf565b811461229457600080fd5b50565b6000813590506122a681612280565b92915050565b6000602082840312156122c2576122c1612003565b5b60006122d084828501612297565b91505092915050565b6122e281612170565b82525050565b60006020820190506122fd60008301846122d9565b92915050565b60006060820190506123186000830186611fd9565b6123256020830185611fd9565b6123326040830184611fd9565b949350505050565b6000806040838503121561235157612350612003565b5b600061235f85828601612199565b925050602061237085828601612297565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123af81612170565b82525050565b60006123c183836123a6565b60208301905092915050565b6000602082019050919050565b60006123e58261237a565b6123ef8185612385565b93506123fa83612396565b8060005b8381101561242b57815161241288826123b5565b975061241d836123cd565b9250506001810190506123fe565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61246d81611fcf565b82525050565b600061247f8383612464565b60208301905092915050565b6000602082019050919050565b60006124a382612438565b6124ad8185612443565b93506124b883612454565b8060005b838110156124e95781516124d08882612473565b97506124db8361248b565b9250506001810190506124bc565b5085935050505092915050565b6000604082019050818103600083015261251081856123da565b905081810360208301526125248184612498565b90509392505050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061259a602f8361252d565b91506125a58261253e565b604082019050919050565b600060208201905081810360008301526125c98161258d565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612606601f8361252d565b9150612611826125d0565b602082019050919050565b60006020820190508181036000830152612635816125f9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126a582611fcf565b91506126b083611fcf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126e5576126e461266b565b5b828201905092915050565b600060608201905061270560008301866122d9565b6127126020830185611fd9565b61271f6040830184611fd9565b949350505050565b600061273282611fcf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127655761276461266b565b5b600182019050919050565b6000819050919050565b600061279561279061278b84612150565b612770565b612150565b9050919050565b60006127a78261277a565b9050919050565b60006127b98261279c565b9050919050565b6127c9816127ae565b82525050565b60006060820190506127e460008301866127c0565b6127f16020830185611fd9565b6127fe6040830184611fd9565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061284082611fcf565b915061284b83611fcf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156128845761288361266b565b5b828202905092915050565b600061289a82611fcf565b915060008214156128ae576128ad61266b565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006128ef60208361252d565b91506128fa826128b9565b602082019050919050565b6000602082019050818103600083015261291e816128e2565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061295b60108361252d565b915061296682612925565b602082019050919050565b6000602082019050818103600083015261298a8161294e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006129cb82611fcf565b91506129d683611fcf565b9250826129e6576129e5612991565b5b828204905092915050565b600081905092915050565b50565b6000612a0c6000836129f1565b9150612a17826129fc565b600082019050919050565b6000612a2d826129ff565b9150819050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612a78601783612a37565b9150612a8382612a42565b601782019050919050565b600081519050919050565b60005b83811015612ab7578082015181840152602081019050612a9c565b83811115612ac6576000848401525b50505050565b6000612ad782612a8e565b612ae18185612a37565b9350612af1818560208601612a99565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612b33601183612a37565b9150612b3e82612afd565b601182019050919050565b6000612b5482612a6b565b9150612b608285612acc565b9150612b6b82612b26565b9150612b778284612acc565b91508190509392505050565b6000601f19601f8301169050919050565b6000612b9f82612a8e565b612ba9818561252d565b9350612bb9818560208601612a99565b612bc281612b83565b840191505092915050565b60006020820190508181036000830152612be78184612b94565b905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612c2560148361252d565b9150612c3082612bef565b602082019050919050565b60006020820190508181036000830152612c5481612c18565b905091905056fea2646970667358221220bea7b7d4a150e957e25043564d94e7345521d8ff2de1e9b99c6cf68daa22d29264736f6c63430008090033",
  "devdoc": {
    "custom:security-contact": "danu@impact3.io",
    "details": "There are total of 100,000,000 Equity Tokens \"EQT\".",
    "kind": "dev",
    "methods": {
      "addStakeHolder(address,uint256)": {
        "params": {
          "_holder": "The address of the existing stakeholder",
          "_initialStake": "The amount to initialise the preportion of the stake"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getStakeHolders()": {
        "returns": {
          "_equityTokens": "An array of equity tokens",
          "_holders": "An array of addresses of the stakeholders"
        }
      },
      "getUpdateWindow()": {
        "returns": {
          "_0": "openTimestamp The opening timestamp of the update window",
          "_1": "closeTimestamp The closing timestamp of the update window"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isStakeHolder(address)": {
        "params": {
          "_holder": "The address of the stakeholder ot check"
        },
        "returns": {
          "_0": "isStakeHolder whether or not the address is a stakeholder"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setImpact3FundAddress(address)": {
        "params": {
          "fund": "The new address of the Impact 3 fund"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateStakeHolder(address,uint256)": {
        "params": {
          "_holder": "The address of the existing stakeholder",
          "_stakeIncrease": "The amount to increase the equity tokens by"
        }
      },
      "withinUpdateWindow()": {
        "returns": {
          "_0": "isOpen Whether the window to update or add new stakeholders is open"
        }
      }
    },
    "title": "A pool to distribute funds to beneficiaries.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addStakeHolder(address,uint256)": {
        "notice": "Adds a new stakeholder with an initial stake"
      },
      "distributeFunds()": {
        "notice": "Distrbute funds to stakeholders and remainder to Impact3 fund"
      },
      "getStakeHolders()": {
        "notice": "Gets all stakeholders of the contract as well as their stake"
      },
      "getUpdateWindow()": {
        "notice": "Calculates the update window intervals"
      },
      "isStakeHolder(address)": {
        "notice": "Checks whether a specific address is a stakeholder of the contract"
      },
      "pause()": {
        "notice": "Pauses the contract so no interactions can be made"
      },
      "setImpact3FundAddress(address)": {
        "notice": "Updates the Impact 3 fund address"
      },
      "unpause()": {
        "notice": "Unpauses the contract so interactions can be made"
      },
      "updateStakeHolder(address,uint256)": {
        "notice": "Updates an existing stakeholder with a specific stake increase"
      },
      "withinUpdateWindow()": {
        "notice": "Returns whether we are within the update window"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 410,
        "contract": "contracts/EquityPool.sol:EquityPool",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/EquityPool.sol:EquityPool",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 511,
        "contract": "contracts/EquityPool.sol:EquityPool",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1218,
        "contract": "contracts/EquityPool.sol:EquityPool",
        "label": "stakeHolderAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1223,
        "contract": "contracts/EquityPool.sol:EquityPool",
        "label": "stakeHolders",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Stake)1215_storage)"
      },
      {
        "astId": 1225,
        "contract": "contracts/EquityPool.sol:EquityPool",
        "label": "impact3FundAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address_payable"
      },
      {
        "astId": 1231,
        "contract": "contracts/EquityPool.sol:EquityPool",
        "label": "lastEndOfIntervalTimestamp",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Stake)1215_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EquityPool.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)1215_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/EquityPool.sol:EquityPool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/EquityPool.sol:EquityPool",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stake)1215_storage": {
        "encoding": "inplace",
        "label": "struct EquityPool.Stake",
        "members": [
          {
            "astId": 1210,
            "contract": "contracts/EquityPool.sol:EquityPool",
            "label": "equityTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1212,
            "contract": "contracts/EquityPool.sol:EquityPool",
            "label": "fundsLastReceived",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1214,
            "contract": "contracts/EquityPool.sol:EquityPool",
            "label": "equityLastUpdated",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}